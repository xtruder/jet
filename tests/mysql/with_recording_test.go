// Code generated by testparrot. DO NOT EDIT.

package mysql

import gotestparrot "github.com/xtruder/go-testparrot"

func init() {
	gotestparrot.R.Load("TestWITH_And_DELETE", []gotestparrot.Recording{{
		Key: 0,
		Value: `
WITH payments_to_delete AS (
     SELECT payment.payment_id AS "payment.payment_id",
          payment.customer_id AS "payment.customer_id",
          payment.staff_id AS "payment.staff_id",
          payment.rental_id AS "payment.rental_id",
          payment.amount AS "payment.amount",
          payment.payment_date AS "payment.payment_date",
          payment.last_update AS "payment.last_update"
     FROM dvds.payment
     WHERE payment.amount < ?
)
DELETE FROM dvds.payment
WHERE payment.payment_id IN ((
          SELECT payments_to_delete.` + "`" + `payment.payment_id` + "`" + ` AS "payment.payment_id"
          FROM payments_to_delete
     ));
`,
	}, {
		Key:   1,
		Value: []interface{}{0.5},
	}})
	gotestparrot.R.Load("TestWITH_And_SELECT", []gotestparrot.Recording{{
		Key: 0,
		Value: `
WITH sales_rep AS (
     SELECT staff.staff_id AS "staff.staff_id",
          (CONCAT(staff.first_name, staff.last_name)) AS "sales_rep_full_name"
     FROM dvds.staff
),customer_sales_rep AS (
     SELECT (CONCAT(customer.first_name, customer.last_name)) AS "customer_name",
          sales_rep.sales_rep_full_name AS "sales_rep_full_name"
     FROM sales_rep
          INNER JOIN dvds.store ON (store.manager_staff_id = sales_rep.` + "`" + `staff.staff_id` + "`" + `)
          INNER JOIN dvds.customer ON (customer.store_id = store.store_id)
)
SELECT customer_sales_rep.customer_name AS "customer_name",
     customer_sales_rep.sales_rep_full_name AS "sales_rep_full_name"
FROM customer_sales_rep
LIMIT ?;
`,
	}, {
		Key:   1,
		Value: []interface{}{int64(10)},
	}, {
		Key: 2,
		Value: []struct {
			CustomerName     string
			SalesRepFullName string
		}{{
			CustomerName:     "MARYSMITH",
			SalesRepFullName: "MikeNew name",
		}, {
			CustomerName:     "PATRICIAJOHNSON",
			SalesRepFullName: "MikeNew name",
		}, {
			CustomerName:     "LINDAWILLIAMS",
			SalesRepFullName: "MikeNew name",
		}, {
			CustomerName:     "ELIZABETHBROWN",
			SalesRepFullName: "MikeNew name",
		}, {
			CustomerName:     "MARIAMILLER",
			SalesRepFullName: "MikeNew name",
		}, {
			CustomerName:     "DOROTHYTAYLOR",
			SalesRepFullName: "MikeNew name",
		}, {
			CustomerName:     "NANCYTHOMAS",
			SalesRepFullName: "MikeNew name",
		}, {
			CustomerName:     "HELENHARRIS",
			SalesRepFullName: "MikeNew name",
		}, {
			CustomerName:     "DONNATHOMPSON",
			SalesRepFullName: "MikeNew name",
		}, {
			CustomerName:     "RUTHMARTINEZ",
			SalesRepFullName: "MikeNew name",
		}},
	}})
	gotestparrot.R.Load("TestWITH_And_UPDATE", []gotestparrot.Recording{{
		Key: 0,
		Value: `
WITH payments_to_update AS (
     SELECT payment.payment_id AS "payment.payment_id",
          payment.customer_id AS "payment.customer_id",
          payment.staff_id AS "payment.staff_id",
          payment.rental_id AS "payment.rental_id",
          payment.amount AS "payment.amount",
          payment.payment_date AS "payment.payment_date",
          payment.last_update AS "payment.last_update"
     FROM dvds.payment
     WHERE payment.amount < ?
)
UPDATE dvds.payment
SET amount = ?
WHERE payment.payment_id IN ((
          SELECT payments_to_update.` + "`" + `payment.payment_id` + "`" + ` AS "payment.payment_id"
          FROM payments_to_update
     ));
`,
	}, {
		Key:   1,
		Value: []interface{}{0.5, 0.0},
	}})
}
