// Code generated by testparrot. DO NOT EDIT.

package mysql

import (
	model "github.com/go-jet/jet/v2/tests/mysql/gen/test_sample/model"
	gotestparrot "github.com/xtruder/go-testparrot"
)

func init() {
	gotestparrot.R.Load("TestInsertEmptyColumnList", []gotestparrot.Recording{{
		Key: 0,
		Value: `
INSERT INTO test_sample.link
VALUES (?, ?, ?, DEFAULT);
`,
	}, {
		Key:   1,
		Value: []interface{}{100, "http://www.postgresqltutorial.com", "PostgreSQL Tutorial"},
	}, {
		Key: 2,
		Value: []model.Link{{
			ID:   int32(100),
			Name: "PostgreSQL Tutorial",
			URL:  "http://www.postgresqltutorial.com",
		}},
	}})
	gotestparrot.R.Load("TestInsertModelObject", []gotestparrot.Recording{{
		Key: 0,
		Value: `
INSERT INTO test_sample.link (url, name)
VALUES (?, ?);
`,
	}, {
		Key:   1,
		Value: []interface{}{"http://www.duckduckgo.com", "Duck Duck go"},
	}})
	gotestparrot.R.Load("TestInsertModelObjectEmptyColumnList", []gotestparrot.Recording{{
		Key: 0,
		Value: `
INSERT INTO test_sample.link
VALUES (?, ?, ?, ?);
`,
	}, {
		Key:   1,
		Value: []interface{}{int32(1000), "http://www.duckduckgo.com", "Duck Duck go", nil},
	}})
	gotestparrot.R.Load("TestInsertModelsObject", []gotestparrot.Recording{{
		Key: 0,
		Value: `
INSERT INTO test_sample.link (url, name)
VALUES (?, ?),
       (?, ?),
       (?, ?);
`,
	}, {
		Key:   1,
		Value: []interface{}{"http://www.postgresqltutorial.com", "PostgreSQL Tutorial", "http://www.google.com", "Google", "http://www.yahoo.com", "Yahoo"},
	}})
	gotestparrot.R.Load("TestInsertOnDuplicateKey", []gotestparrot.Recording{{
		Key: 0,
		Value: `
INSERT INTO test_sample.link
VALUES (?, ?, ?, DEFAULT),
       (?, ?, ?, DEFAULT)
ON DUPLICATE KEY UPDATE id = (id + ?),
                        name = ?;
`,
	}, {
		Key:   1,
		Value: []interface{}{1000, "http://www.postgresqltutorial.com", "PostgreSQL Tutorial", 1000, "http://www.postgresqltutorial.com", "PostgreSQL Tutorial", int64(11), "PostgreSQL Tutorial 2"},
	}, {
		Key: 2,
		Value: []model.Link{{
			ID:   int32(1011),
			Name: "PostgreSQL Tutorial 2",
			URL:  "http://www.postgresqltutorial.com",
		}},
	}})
	gotestparrot.R.Load("TestInsertQuery", []gotestparrot.Recording{{
		Key: 0,
		Value: `
INSERT INTO test_sample.link (url, name, id) (
     SELECT link.url AS "link.url",
          link.name AS "link.name",
          ?
     FROM test_sample.link
     WHERE link.id = ?
);
`,
	}, {
		Key:   1,
		Value: []interface{}{int64(1000), int64(1)},
	}, {
		Key: 2,
		Value: []model.Link{{
			Description: gotestparrot.Ptr("").(*string),
			ID:          int32(1),
			Name:        "Youtube",
			URL:         "http://www.youtube.com",
		}, {
			ID:   int32(1000),
			Name: "Youtube",
			URL:  "http://www.youtube.com",
		}},
	}})
	gotestparrot.R.Load("TestInsertUsingMutableColumns", []gotestparrot.Recording{{
		Key: 0,
		Value: `
INSERT INTO test_sample.link (url, name, description)
VALUES (?, ?, DEFAULT),
       (?, ?, ?),
       (?, ?, ?),
       (?, ?, ?);
`,
	}, {
		Key:   1,
		Value: []interface{}{"http://www.postgresqltutorial.com", "PostgreSQL Tutorial", "http://www.google.com", "Google", nil, "http://www.google.com", "Google", nil, "http://www.yahoo.com", "Yahoo", nil},
	}})
	gotestparrot.R.Load("TestInsertValues", []gotestparrot.Recording{{
		Key: 0,
		Value: `
INSERT INTO test_sample.link (id, url, name, description)
VALUES (?, ?, ?, DEFAULT),
       (?, ?, ?, DEFAULT),
       (?, ?, ?, ?);
`,
	}, {
		Key:   1,
		Value: []interface{}{100, "http://www.postgresqltutorial.com", "PostgreSQL Tutorial", 101, "http://www.google.com", "Google", 102, "http://www.yahoo.com", "Yahoo", nil},
	}, {
		Key: 2,
		Value: []model.Link{{
			ID:   int32(100),
			Name: "PostgreSQL Tutorial",
			URL:  "http://www.postgresqltutorial.com",
		}, {
			ID:   int32(101),
			Name: "Google",
			URL:  "http://www.google.com",
		}, {
			ID:   int32(102),
			Name: "Yahoo",
			URL:  "http://www.yahoo.com",
		}},
	}})
}
