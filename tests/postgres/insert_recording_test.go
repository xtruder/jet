// Code generated by testparrot. DO NOT EDIT.

package postgres

import (
	model "github.com/go-jet/jet/v2/tests/postgres/gen/test_sample/model"
	gotestparrot "github.com/xtruder/go-testparrot"
)

func init() {
	gotestparrot.R.Load("TestInsertEmptyColumnList", []gotestparrot.Recording{{
		Key: 0,
		Value: `
INSERT INTO test_sample.link
VALUES (100, 'http://www.postgresqltutorial.com', 'PostgreSQL Tutorial', DEFAULT);
`,
	}})
	gotestparrot.R.Load("TestInsertModelObject", []gotestparrot.Recording{{
		Key: 0,
		Value: `
INSERT INTO test_sample.link (url, name)
VALUES ('http://www.duckduckgo.com', 'Duck Duck go');
`,
	}})
	gotestparrot.R.Load("TestInsertModelObjectEmptyColumnList", []gotestparrot.Recording{{
		Key: 0,
		Value: `
INSERT INTO test_sample.link
VALUES (1000, 'http://www.duckduckgo.com', 'Duck Duck go', NULL);
`,
	}})
	gotestparrot.R.Load("TestInsertModelsObject", []gotestparrot.Recording{{
		Key: 0,
		Value: `
INSERT INTO test_sample.link (url, name)
VALUES ('http://www.postgresqltutorial.com', 'PostgreSQL Tutorial'),
       ('http://www.google.com', 'Google'),
       ('http://www.yahoo.com', 'Yahoo');
`,
	}})
	gotestparrot.R.Load("TestInsertOnConflict/do_nothing", []gotestparrot.Recording{{
		Key:   0,
		Value: "INSERT INTO test_sample.employee (employee_id, first_name, last_name, employment_date, manager_id) VALUES ($1, $2, $3, $4, $5), ($6, $7, $8, $9, $10) ON CONFLICT (employee_id) DO NOTHING;",
	}})
	gotestparrot.R.Load("TestInsertOnConflict/do_update", []gotestparrot.Recording{{
		Key: 0,
		Value: `
INSERT INTO test_sample.link (id, url, name, description)
VALUES (100, 'http://www.postgresqltutorial.com', 'PostgreSQL Tutorial', DEFAULT),
       (200, 'http://www.postgresqltutorial.com', 'PostgreSQL Tutorial', DEFAULT)
ON CONFLICT (id) DO UPDATE
       SET id = excluded.id,
           url = 'http://www.postgresqltutorial2.com'
RETURNING link.id AS "link.id",
          link.url AS "link.url",
          link.name AS "link.name",
          link.description AS "link.description";
`,
	}})
	gotestparrot.R.Load("TestInsertOnConflict/do_update_complex", []gotestparrot.Recording{{
		Key: 0,
		Value: `
INSERT INTO test_sample.link (id, url, name, description)
VALUES (100, 'http://www.postgresqltutorial.com', 'PostgreSQL Tutorial', DEFAULT)
ON CONFLICT (id) WHERE (id * 2) > 10 DO UPDATE
       SET id = (
                SELECT MAX(link.id) + 1
                FROM test_sample.link
           ),
           (name, description) = ROW(excluded.name, 'new description')
       WHERE link.description IS NOT NULL;
`,
	}})
	gotestparrot.R.Load("TestInsertOnConflict/on_constraint_do_nothing", []gotestparrot.Recording{{
		Key:   0,
		Value: "INSERT INTO test_sample.employee (employee_id, first_name, last_name, employment_date, manager_id) VALUES ($1, $2, $3, $4, $5), ($6, $7, $8, $9, $10) ON CONFLICT ON CONSTRAINT employee_pkey DO NOTHING;",
	}})
	gotestparrot.R.Load("TestInsertOnConflict/on_constraint_do_update", []gotestparrot.Recording{{
		Key: 0,
		Value: `
INSERT INTO test_sample.link (id, url, name, description)
VALUES (100, 'http://www.postgresqltutorial.com', 'PostgreSQL Tutorial', DEFAULT),
       (200, 'http://www.postgresqltutorial.com', 'PostgreSQL Tutorial', DEFAULT)
ON CONFLICT ON CONSTRAINT link_pkey DO UPDATE
       SET id = excluded.id,
           url = 'http://www.postgresqltutorial2.com'
RETURNING link.id AS "link.id",
          link.url AS "link.url",
          link.name AS "link.name",
          link.description AS "link.description";
`,
	}})
	gotestparrot.R.Load("TestInsertQuery", []gotestparrot.Recording{{
		Key: 0,
		Value: `
INSERT INTO test_sample.link (url, name) (
     SELECT link.url AS "link.url",
          link.name AS "link.name"
     FROM test_sample.link
     WHERE link.id = 0
)
RETURNING link.id AS "link.id",
          link.url AS "link.url",
          link.name AS "link.name",
          link.description AS "link.description";
`,
	}})
	gotestparrot.R.Load("TestInsertUsingMutableColumns", []gotestparrot.Recording{{
		Key: 0,
		Value: `
INSERT INTO test_sample.link (url, name, description)
VALUES ('http://www.postgresqltutorial.com', 'PostgreSQL Tutorial', DEFAULT),
       ('http://www.google.com', 'Google', NULL),
       ('http://www.google.com', 'Google', NULL),
       ('http://www.yahoo.com', 'Yahoo', NULL);
`,
	}})
	gotestparrot.R.Load("TestInsertValues", []gotestparrot.Recording{{
		Key: 0,
		Value: `
INSERT INTO test_sample.link (id, url, name, description)
VALUES (100, 'http://www.postgresqltutorial.com', 'PostgreSQL Tutorial', DEFAULT),
       (101, 'http://www.google.com', 'Google', DEFAULT),
       (102, 'http://www.yahoo.com', 'Yahoo', NULL)
RETURNING link.id AS "link.id",
          link.url AS "link.url",
          link.name AS "link.name",
          link.description AS "link.description";
`,
	}, {
		Key: 1,
		Value: []model.Link{{
			ID:   int32(100),
			Name: "PostgreSQL Tutorial",
			URL:  "http://www.postgresqltutorial.com",
		}, {
			ID:   int32(101),
			Name: "Google",
			URL:  "http://www.google.com",
		}, {
			ID:   int32(102),
			Name: "Yahoo",
			URL:  "http://www.yahoo.com",
		}},
	}})
}
