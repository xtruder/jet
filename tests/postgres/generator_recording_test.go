// Code generated by testparrot. DO NOT EDIT.

package postgres

import gotestparrot "github.com/xtruder/go-testparrot"

func init() {
	gotestparrot.R.Load("TestGenerator", []gotestparrot.Recording{{
		Key: "/enum/mpaa_rating.go",
		Value: `//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package enum

import "github.com/go-jet/jet/v2/postgres"

var MpaaRating = &struct {
	G    postgres.StringExpression
	Pg   postgres.StringExpression
	Pg13 postgres.StringExpression
	R    postgres.StringExpression
	Nc17 postgres.StringExpression
}{
	G:    postgres.NewEnumValue("G"),
	Pg:   postgres.NewEnumValue("PG"),
	Pg13: postgres.NewEnumValue("PG-13"),
	R:    postgres.NewEnumValue("R"),
	Nc17: postgres.NewEnumValue("NC-17"),
}
`,
	}, {
		Key: "/model/actor.go",
		Value: `//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package model

import (
	"time"
)

type Actor struct {
	ActorID    int32 ` + "`" + `sql:"primary_key"` + "`" + `
	FirstName  string
	LastName   string
	LastUpdate time.Time
}
`,
	}, {
		Key: "/model/actor_info.go",
		Value: `//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package model

type ActorInfo struct {
	ActorID   *int32
	FirstName *string
	LastName  *string
	FilmInfo  *string
}
`,
	}, {
		Key: "/model/address.go",
		Value: `//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package model

import (
	"time"
)

type Address struct {
	AddressID  int32 ` + "`" + `sql:"primary_key"` + "`" + `
	Address    string
	Address2   *string
	District   string
	CityID     int16
	PostalCode *string
	Phone      string
	LastUpdate time.Time
}
`,
	}, {
		Key: "/model/category.go",
		Value: `//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package model

import (
	"time"
)

type Category struct {
	CategoryID int32 ` + "`" + `sql:"primary_key"` + "`" + `
	Name       string
	LastUpdate time.Time
}
`,
	}, {
		Key: "/model/city.go",
		Value: `//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package model

import (
	"time"
)

type City struct {
	CityID     int32 ` + "`" + `sql:"primary_key"` + "`" + `
	City       string
	CountryID  int16
	LastUpdate time.Time
}
`,
	}, {
		Key: "/model/country.go",
		Value: `//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package model

import (
	"time"
)

type Country struct {
	CountryID  int32 ` + "`" + `sql:"primary_key"` + "`" + `
	Country    string
	LastUpdate time.Time
}
`,
	}, {
		Key: "/model/customer.go",
		Value: `//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package model

import (
	"time"
)

type Customer struct {
	CustomerID int32 ` + "`" + `sql:"primary_key"` + "`" + `
	StoreID    int16
	FirstName  string
	LastName   string
	Email      *string
	AddressID  int16
	Activebool bool
	CreateDate time.Time
	LastUpdate *time.Time
	Active     *int32
}
`,
	}, {
		Key: "/model/customer_list.go",
		Value: `//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package model

type CustomerList struct {
	ID      *int32
	Name    *string
	Address *string
	ZipCode *string
	Phone   *string
	City    *string
	Country *string
	Notes   *string
	Sid     *int16
}
`,
	}, {
		Key: "/model/film.go",
		Value: `//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package model

import (
	"time"
)

type Film struct {
	FilmID          int32 ` + "`" + `sql:"primary_key"` + "`" + `
	Title           string
	Description     *string
	ReleaseYear     *int32
	LanguageID      int16
	RentalDuration  int16
	RentalRate      float64
	Length          *int16
	ReplacementCost float64
	Rating          *MpaaRating
	LastUpdate      time.Time
	SpecialFeatures *string
	Fulltext        string
}
`,
	}, {
		Key: "/model/film_actor.go",
		Value: `//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package model

import (
	"time"
)

type FilmActor struct {
	ActorID    int16 ` + "`" + `sql:"primary_key"` + "`" + `
	FilmID     int16 ` + "`" + `sql:"primary_key"` + "`" + `
	LastUpdate time.Time
}
`,
	}, {
		Key: "/model/film_category.go",
		Value: `//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package model

import (
	"time"
)

type FilmCategory struct {
	FilmID     int16 ` + "`" + `sql:"primary_key"` + "`" + `
	CategoryID int16 ` + "`" + `sql:"primary_key"` + "`" + `
	LastUpdate time.Time
}
`,
	}, {
		Key: "/model/film_list.go",
		Value: `//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package model

type FilmList struct {
	Fid         *int32
	Title       *string
	Description *string
	Category    *string
	Price       *float64
	Length      *int16
	Rating      *MpaaRating
	Actors      *string
}
`,
	}, {
		Key: "/model/inventory.go",
		Value: `//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package model

import (
	"time"
)

type Inventory struct {
	InventoryID int32 ` + "`" + `sql:"primary_key"` + "`" + `
	FilmID      int16
	StoreID     int16
	LastUpdate  time.Time
}
`,
	}, {
		Key: "/model/language.go",
		Value: `//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package model

import (
	"time"
)

type Language struct {
	LanguageID int32 ` + "`" + `sql:"primary_key"` + "`" + `
	Name       string
	LastUpdate time.Time
}
`,
	}, {
		Key: "/model/mpaa_rating.go",
		Value: `//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package model

import "errors"

type MpaaRating string

const (
	MpaaRating_G    MpaaRating = "G"
	MpaaRating_Pg   MpaaRating = "PG"
	MpaaRating_Pg13 MpaaRating = "PG-13"
	MpaaRating_R    MpaaRating = "R"
	MpaaRating_Nc17 MpaaRating = "NC-17"
)

func (e *MpaaRating) Scan(value interface{}) error {
	if v, ok := value.(string); !ok {
		return errors.New("jet: Invalid data for MpaaRating enum")
	} else {
		switch string(v) {
		case "G":
			*e = MpaaRating_G
		case "PG":
			*e = MpaaRating_Pg
		case "PG-13":
			*e = MpaaRating_Pg13
		case "R":
			*e = MpaaRating_R
		case "NC-17":
			*e = MpaaRating_Nc17
		default:
			return errors.New("jet: Inavlid data " + string(v) + "for MpaaRating enum")
		}

		return nil
	}
}

func (e MpaaRating) String() string {
	return string(e)
}
`,
	}, {
		Key: "/model/nicer_but_slower_film_list.go",
		Value: `//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package model

type NicerButSlowerFilmList struct {
	Fid         *int32
	Title       *string
	Description *string
	Category    *string
	Price       *float64
	Length      *int16
	Rating      *MpaaRating
	Actors      *string
}
`,
	}, {
		Key: "/model/payment.go",
		Value: `//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package model

import (
	"time"
)

type Payment struct {
	PaymentID   int32 ` + "`" + `sql:"primary_key"` + "`" + `
	CustomerID  int16
	StaffID     int16
	RentalID    int32
	Amount      float64
	PaymentDate time.Time
}
`,
	}, {
		Key: "/model/rental.go",
		Value: `//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package model

import (
	"time"
)

type Rental struct {
	RentalID    int32 ` + "`" + `sql:"primary_key"` + "`" + `
	RentalDate  time.Time
	InventoryID int32
	CustomerID  int16
	ReturnDate  *time.Time
	StaffID     int16
	LastUpdate  time.Time
}
`,
	}, {
		Key: "/model/sales_by_film_category.go",
		Value: `//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package model

type SalesByFilmCategory struct {
	Category   *string
	TotalSales *float64
}
`,
	}, {
		Key: "/model/sales_by_store.go",
		Value: `//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package model

type SalesByStore struct {
	Store      *string
	Manager    *string
	TotalSales *float64
}
`,
	}, {
		Key: "/model/staff.go",
		Value: `//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package model

import (
	"time"
)

type Staff struct {
	StaffID    int32 ` + "`" + `sql:"primary_key"` + "`" + `
	FirstName  string
	LastName   string
	AddressID  int16
	Email      *string
	StoreID    int16
	Active     bool
	Username   string
	Password   *string
	LastUpdate time.Time
	Picture    *[]byte
}
`,
	}, {
		Key: "/model/staff_list.go",
		Value: `//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package model

type StaffList struct {
	ID      *int32
	Name    *string
	Address *string
	ZipCode *string
	Phone   *string
	City    *string
	Country *string
	Sid     *int16
}
`,
	}, {
		Key: "/model/store.go",
		Value: `//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package model

import (
	"time"
)

type Store struct {
	StoreID        int32 ` + "`" + `sql:"primary_key"` + "`" + `
	ManagerStaffID int16
	AddressID      int16
	LastUpdate     time.Time
}
`,
	}, {
		Key: "/table/actor.go",
		Value: `//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Actor = newActorTable()

type actorTable struct {
	postgres.Table

	//Columns
	ActorID    postgres.ColumnInteger
	FirstName  postgres.ColumnString
	LastName   postgres.ColumnString
	LastUpdate postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ActorTable struct {
	actorTable

	EXCLUDED actorTable
}

// AS creates new ActorTable with assigned alias
func (a *ActorTable) AS(alias string) *ActorTable {
	aliasTable := newActorTable()
	aliasTable.Table.ALIAS(alias)
	return aliasTable
}

func newActorTable() *ActorTable {
	return &ActorTable{
		actorTable: newActorTableImpl("dvds", "actor"),
		EXCLUDED:   newActorTableImpl("", "excluded"),
	}
}

func newActorTableImpl(schemaName, tableName string) actorTable {
	var (
		ActorIDColumn    = postgres.IntegerColumn("actor_id")
		FirstNameColumn  = postgres.StringColumn("first_name")
		LastNameColumn   = postgres.StringColumn("last_name")
		LastUpdateColumn = postgres.TimestampColumn("last_update")
		allColumns       = postgres.ColumnList{ActorIDColumn, FirstNameColumn, LastNameColumn, LastUpdateColumn}
		mutableColumns   = postgres.ColumnList{FirstNameColumn, LastNameColumn, LastUpdateColumn}
	)

	return actorTable{
		Table: postgres.NewTable(schemaName, tableName, allColumns...),

		//Columns
		ActorID:    ActorIDColumn,
		FirstName:  FirstNameColumn,
		LastName:   LastNameColumn,
		LastUpdate: LastUpdateColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
`,
	}, {
		Key: "/table/address.go",
		Value: `//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Address = newAddressTable()

type addressTable struct {
	postgres.Table

	//Columns
	AddressID  postgres.ColumnInteger
	Address    postgres.ColumnString
	Address2   postgres.ColumnString
	District   postgres.ColumnString
	CityID     postgres.ColumnInteger
	PostalCode postgres.ColumnString
	Phone      postgres.ColumnString
	LastUpdate postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AddressTable struct {
	addressTable

	EXCLUDED addressTable
}

// AS creates new AddressTable with assigned alias
func (a *AddressTable) AS(alias string) *AddressTable {
	aliasTable := newAddressTable()
	aliasTable.Table.ALIAS(alias)
	return aliasTable
}

func newAddressTable() *AddressTable {
	return &AddressTable{
		addressTable: newAddressTableImpl("dvds", "address"),
		EXCLUDED:     newAddressTableImpl("", "excluded"),
	}
}

func newAddressTableImpl(schemaName, tableName string) addressTable {
	var (
		AddressIDColumn  = postgres.IntegerColumn("address_id")
		AddressColumn    = postgres.StringColumn("address")
		Address2Column   = postgres.StringColumn("address2")
		DistrictColumn   = postgres.StringColumn("district")
		CityIDColumn     = postgres.IntegerColumn("city_id")
		PostalCodeColumn = postgres.StringColumn("postal_code")
		PhoneColumn      = postgres.StringColumn("phone")
		LastUpdateColumn = postgres.TimestampColumn("last_update")
		allColumns       = postgres.ColumnList{AddressIDColumn, AddressColumn, Address2Column, DistrictColumn, CityIDColumn, PostalCodeColumn, PhoneColumn, LastUpdateColumn}
		mutableColumns   = postgres.ColumnList{AddressColumn, Address2Column, DistrictColumn, CityIDColumn, PostalCodeColumn, PhoneColumn, LastUpdateColumn}
	)

	return addressTable{
		Table: postgres.NewTable(schemaName, tableName, allColumns...),

		//Columns
		AddressID:  AddressIDColumn,
		Address:    AddressColumn,
		Address2:   Address2Column,
		District:   DistrictColumn,
		CityID:     CityIDColumn,
		PostalCode: PostalCodeColumn,
		Phone:      PhoneColumn,
		LastUpdate: LastUpdateColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
`,
	}, {
		Key: "/table/category.go",
		Value: `//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Category = newCategoryTable()

type categoryTable struct {
	postgres.Table

	//Columns
	CategoryID postgres.ColumnInteger
	Name       postgres.ColumnString
	LastUpdate postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CategoryTable struct {
	categoryTable

	EXCLUDED categoryTable
}

// AS creates new CategoryTable with assigned alias
func (a *CategoryTable) AS(alias string) *CategoryTable {
	aliasTable := newCategoryTable()
	aliasTable.Table.ALIAS(alias)
	return aliasTable
}

func newCategoryTable() *CategoryTable {
	return &CategoryTable{
		categoryTable: newCategoryTableImpl("dvds", "category"),
		EXCLUDED:      newCategoryTableImpl("", "excluded"),
	}
}

func newCategoryTableImpl(schemaName, tableName string) categoryTable {
	var (
		CategoryIDColumn = postgres.IntegerColumn("category_id")
		NameColumn       = postgres.StringColumn("name")
		LastUpdateColumn = postgres.TimestampColumn("last_update")
		allColumns       = postgres.ColumnList{CategoryIDColumn, NameColumn, LastUpdateColumn}
		mutableColumns   = postgres.ColumnList{NameColumn, LastUpdateColumn}
	)

	return categoryTable{
		Table: postgres.NewTable(schemaName, tableName, allColumns...),

		//Columns
		CategoryID: CategoryIDColumn,
		Name:       NameColumn,
		LastUpdate: LastUpdateColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
`,
	}, {
		Key: "/table/city.go",
		Value: `//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var City = newCityTable()

type cityTable struct {
	postgres.Table

	//Columns
	CityID     postgres.ColumnInteger
	City       postgres.ColumnString
	CountryID  postgres.ColumnInteger
	LastUpdate postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CityTable struct {
	cityTable

	EXCLUDED cityTable
}

// AS creates new CityTable with assigned alias
func (a *CityTable) AS(alias string) *CityTable {
	aliasTable := newCityTable()
	aliasTable.Table.ALIAS(alias)
	return aliasTable
}

func newCityTable() *CityTable {
	return &CityTable{
		cityTable: newCityTableImpl("dvds", "city"),
		EXCLUDED:  newCityTableImpl("", "excluded"),
	}
}

func newCityTableImpl(schemaName, tableName string) cityTable {
	var (
		CityIDColumn     = postgres.IntegerColumn("city_id")
		CityColumn       = postgres.StringColumn("city")
		CountryIDColumn  = postgres.IntegerColumn("country_id")
		LastUpdateColumn = postgres.TimestampColumn("last_update")
		allColumns       = postgres.ColumnList{CityIDColumn, CityColumn, CountryIDColumn, LastUpdateColumn}
		mutableColumns   = postgres.ColumnList{CityColumn, CountryIDColumn, LastUpdateColumn}
	)

	return cityTable{
		Table: postgres.NewTable(schemaName, tableName, allColumns...),

		//Columns
		CityID:     CityIDColumn,
		City:       CityColumn,
		CountryID:  CountryIDColumn,
		LastUpdate: LastUpdateColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
`,
	}, {
		Key: "/table/country.go",
		Value: `//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Country = newCountryTable()

type countryTable struct {
	postgres.Table

	//Columns
	CountryID  postgres.ColumnInteger
	Country    postgres.ColumnString
	LastUpdate postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CountryTable struct {
	countryTable

	EXCLUDED countryTable
}

// AS creates new CountryTable with assigned alias
func (a *CountryTable) AS(alias string) *CountryTable {
	aliasTable := newCountryTable()
	aliasTable.Table.ALIAS(alias)
	return aliasTable
}

func newCountryTable() *CountryTable {
	return &CountryTable{
		countryTable: newCountryTableImpl("dvds", "country"),
		EXCLUDED:     newCountryTableImpl("", "excluded"),
	}
}

func newCountryTableImpl(schemaName, tableName string) countryTable {
	var (
		CountryIDColumn  = postgres.IntegerColumn("country_id")
		CountryColumn    = postgres.StringColumn("country")
		LastUpdateColumn = postgres.TimestampColumn("last_update")
		allColumns       = postgres.ColumnList{CountryIDColumn, CountryColumn, LastUpdateColumn}
		mutableColumns   = postgres.ColumnList{CountryColumn, LastUpdateColumn}
	)

	return countryTable{
		Table: postgres.NewTable(schemaName, tableName, allColumns...),

		//Columns
		CountryID:  CountryIDColumn,
		Country:    CountryColumn,
		LastUpdate: LastUpdateColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
`,
	}, {
		Key: "/table/customer.go",
		Value: `//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Customer = newCustomerTable()

type customerTable struct {
	postgres.Table

	//Columns
	CustomerID postgres.ColumnInteger
	StoreID    postgres.ColumnInteger
	FirstName  postgres.ColumnString
	LastName   postgres.ColumnString
	Email      postgres.ColumnString
	AddressID  postgres.ColumnInteger
	Activebool postgres.ColumnBool
	CreateDate postgres.ColumnDate
	LastUpdate postgres.ColumnTimestamp
	Active     postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CustomerTable struct {
	customerTable

	EXCLUDED customerTable
}

// AS creates new CustomerTable with assigned alias
func (a *CustomerTable) AS(alias string) *CustomerTable {
	aliasTable := newCustomerTable()
	aliasTable.Table.ALIAS(alias)
	return aliasTable
}

func newCustomerTable() *CustomerTable {
	return &CustomerTable{
		customerTable: newCustomerTableImpl("dvds", "customer"),
		EXCLUDED:      newCustomerTableImpl("", "excluded"),
	}
}

func newCustomerTableImpl(schemaName, tableName string) customerTable {
	var (
		CustomerIDColumn = postgres.IntegerColumn("customer_id")
		StoreIDColumn    = postgres.IntegerColumn("store_id")
		FirstNameColumn  = postgres.StringColumn("first_name")
		LastNameColumn   = postgres.StringColumn("last_name")
		EmailColumn      = postgres.StringColumn("email")
		AddressIDColumn  = postgres.IntegerColumn("address_id")
		ActiveboolColumn = postgres.BoolColumn("activebool")
		CreateDateColumn = postgres.DateColumn("create_date")
		LastUpdateColumn = postgres.TimestampColumn("last_update")
		ActiveColumn     = postgres.IntegerColumn("active")
		allColumns       = postgres.ColumnList{CustomerIDColumn, StoreIDColumn, FirstNameColumn, LastNameColumn, EmailColumn, AddressIDColumn, ActiveboolColumn, CreateDateColumn, LastUpdateColumn, ActiveColumn}
		mutableColumns   = postgres.ColumnList{StoreIDColumn, FirstNameColumn, LastNameColumn, EmailColumn, AddressIDColumn, ActiveboolColumn, CreateDateColumn, LastUpdateColumn, ActiveColumn}
	)

	return customerTable{
		Table: postgres.NewTable(schemaName, tableName, allColumns...),

		//Columns
		CustomerID: CustomerIDColumn,
		StoreID:    StoreIDColumn,
		FirstName:  FirstNameColumn,
		LastName:   LastNameColumn,
		Email:      EmailColumn,
		AddressID:  AddressIDColumn,
		Activebool: ActiveboolColumn,
		CreateDate: CreateDateColumn,
		LastUpdate: LastUpdateColumn,
		Active:     ActiveColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
`,
	}, {
		Key: "/table/film.go",
		Value: `//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Film = newFilmTable()

type filmTable struct {
	postgres.Table

	//Columns
	FilmID          postgres.ColumnInteger
	Title           postgres.ColumnString
	Description     postgres.ColumnString
	ReleaseYear     postgres.ColumnInteger
	LanguageID      postgres.ColumnInteger
	RentalDuration  postgres.ColumnInteger
	RentalRate      postgres.ColumnFloat
	Length          postgres.ColumnInteger
	ReplacementCost postgres.ColumnFloat
	Rating          postgres.ColumnString
	LastUpdate      postgres.ColumnTimestamp
	SpecialFeatures postgres.ColumnString
	Fulltext        postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type FilmTable struct {
	filmTable

	EXCLUDED filmTable
}

// AS creates new FilmTable with assigned alias
func (a *FilmTable) AS(alias string) *FilmTable {
	aliasTable := newFilmTable()
	aliasTable.Table.ALIAS(alias)
	return aliasTable
}

func newFilmTable() *FilmTable {
	return &FilmTable{
		filmTable: newFilmTableImpl("dvds", "film"),
		EXCLUDED:  newFilmTableImpl("", "excluded"),
	}
}

func newFilmTableImpl(schemaName, tableName string) filmTable {
	var (
		FilmIDColumn          = postgres.IntegerColumn("film_id")
		TitleColumn           = postgres.StringColumn("title")
		DescriptionColumn     = postgres.StringColumn("description")
		ReleaseYearColumn     = postgres.IntegerColumn("release_year")
		LanguageIDColumn      = postgres.IntegerColumn("language_id")
		RentalDurationColumn  = postgres.IntegerColumn("rental_duration")
		RentalRateColumn      = postgres.FloatColumn("rental_rate")
		LengthColumn          = postgres.IntegerColumn("length")
		ReplacementCostColumn = postgres.FloatColumn("replacement_cost")
		RatingColumn          = postgres.StringColumn("rating")
		LastUpdateColumn      = postgres.TimestampColumn("last_update")
		SpecialFeaturesColumn = postgres.StringColumn("special_features")
		FulltextColumn        = postgres.StringColumn("fulltext")
		allColumns            = postgres.ColumnList{FilmIDColumn, TitleColumn, DescriptionColumn, ReleaseYearColumn, LanguageIDColumn, RentalDurationColumn, RentalRateColumn, LengthColumn, ReplacementCostColumn, RatingColumn, LastUpdateColumn, SpecialFeaturesColumn, FulltextColumn}
		mutableColumns        = postgres.ColumnList{TitleColumn, DescriptionColumn, ReleaseYearColumn, LanguageIDColumn, RentalDurationColumn, RentalRateColumn, LengthColumn, ReplacementCostColumn, RatingColumn, LastUpdateColumn, SpecialFeaturesColumn, FulltextColumn}
	)

	return filmTable{
		Table: postgres.NewTable(schemaName, tableName, allColumns...),

		//Columns
		FilmID:          FilmIDColumn,
		Title:           TitleColumn,
		Description:     DescriptionColumn,
		ReleaseYear:     ReleaseYearColumn,
		LanguageID:      LanguageIDColumn,
		RentalDuration:  RentalDurationColumn,
		RentalRate:      RentalRateColumn,
		Length:          LengthColumn,
		ReplacementCost: ReplacementCostColumn,
		Rating:          RatingColumn,
		LastUpdate:      LastUpdateColumn,
		SpecialFeatures: SpecialFeaturesColumn,
		Fulltext:        FulltextColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
`,
	}, {
		Key: "/table/film_actor.go",
		Value: `//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var FilmActor = newFilmActorTable()

type filmActorTable struct {
	postgres.Table

	//Columns
	ActorID    postgres.ColumnInteger
	FilmID     postgres.ColumnInteger
	LastUpdate postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type FilmActorTable struct {
	filmActorTable

	EXCLUDED filmActorTable
}

// AS creates new FilmActorTable with assigned alias
func (a *FilmActorTable) AS(alias string) *FilmActorTable {
	aliasTable := newFilmActorTable()
	aliasTable.Table.ALIAS(alias)
	return aliasTable
}

func newFilmActorTable() *FilmActorTable {
	return &FilmActorTable{
		filmActorTable: newFilmActorTableImpl("dvds", "film_actor"),
		EXCLUDED:       newFilmActorTableImpl("", "excluded"),
	}
}

func newFilmActorTableImpl(schemaName, tableName string) filmActorTable {
	var (
		ActorIDColumn    = postgres.IntegerColumn("actor_id")
		FilmIDColumn     = postgres.IntegerColumn("film_id")
		LastUpdateColumn = postgres.TimestampColumn("last_update")
		allColumns       = postgres.ColumnList{ActorIDColumn, FilmIDColumn, LastUpdateColumn}
		mutableColumns   = postgres.ColumnList{LastUpdateColumn}
	)

	return filmActorTable{
		Table: postgres.NewTable(schemaName, tableName, allColumns...),

		//Columns
		ActorID:    ActorIDColumn,
		FilmID:     FilmIDColumn,
		LastUpdate: LastUpdateColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
`,
	}, {
		Key: "/table/film_category.go",
		Value: `//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var FilmCategory = newFilmCategoryTable()

type filmCategoryTable struct {
	postgres.Table

	//Columns
	FilmID     postgres.ColumnInteger
	CategoryID postgres.ColumnInteger
	LastUpdate postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type FilmCategoryTable struct {
	filmCategoryTable

	EXCLUDED filmCategoryTable
}

// AS creates new FilmCategoryTable with assigned alias
func (a *FilmCategoryTable) AS(alias string) *FilmCategoryTable {
	aliasTable := newFilmCategoryTable()
	aliasTable.Table.ALIAS(alias)
	return aliasTable
}

func newFilmCategoryTable() *FilmCategoryTable {
	return &FilmCategoryTable{
		filmCategoryTable: newFilmCategoryTableImpl("dvds", "film_category"),
		EXCLUDED:          newFilmCategoryTableImpl("", "excluded"),
	}
}

func newFilmCategoryTableImpl(schemaName, tableName string) filmCategoryTable {
	var (
		FilmIDColumn     = postgres.IntegerColumn("film_id")
		CategoryIDColumn = postgres.IntegerColumn("category_id")
		LastUpdateColumn = postgres.TimestampColumn("last_update")
		allColumns       = postgres.ColumnList{FilmIDColumn, CategoryIDColumn, LastUpdateColumn}
		mutableColumns   = postgres.ColumnList{LastUpdateColumn}
	)

	return filmCategoryTable{
		Table: postgres.NewTable(schemaName, tableName, allColumns...),

		//Columns
		FilmID:     FilmIDColumn,
		CategoryID: CategoryIDColumn,
		LastUpdate: LastUpdateColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
`,
	}, {
		Key: "/table/inventory.go",
		Value: `//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Inventory = newInventoryTable()

type inventoryTable struct {
	postgres.Table

	//Columns
	InventoryID postgres.ColumnInteger
	FilmID      postgres.ColumnInteger
	StoreID     postgres.ColumnInteger
	LastUpdate  postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type InventoryTable struct {
	inventoryTable

	EXCLUDED inventoryTable
}

// AS creates new InventoryTable with assigned alias
func (a *InventoryTable) AS(alias string) *InventoryTable {
	aliasTable := newInventoryTable()
	aliasTable.Table.ALIAS(alias)
	return aliasTable
}

func newInventoryTable() *InventoryTable {
	return &InventoryTable{
		inventoryTable: newInventoryTableImpl("dvds", "inventory"),
		EXCLUDED:       newInventoryTableImpl("", "excluded"),
	}
}

func newInventoryTableImpl(schemaName, tableName string) inventoryTable {
	var (
		InventoryIDColumn = postgres.IntegerColumn("inventory_id")
		FilmIDColumn      = postgres.IntegerColumn("film_id")
		StoreIDColumn     = postgres.IntegerColumn("store_id")
		LastUpdateColumn  = postgres.TimestampColumn("last_update")
		allColumns        = postgres.ColumnList{InventoryIDColumn, FilmIDColumn, StoreIDColumn, LastUpdateColumn}
		mutableColumns    = postgres.ColumnList{FilmIDColumn, StoreIDColumn, LastUpdateColumn}
	)

	return inventoryTable{
		Table: postgres.NewTable(schemaName, tableName, allColumns...),

		//Columns
		InventoryID: InventoryIDColumn,
		FilmID:      FilmIDColumn,
		StoreID:     StoreIDColumn,
		LastUpdate:  LastUpdateColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
`,
	}, {
		Key: "/table/language.go",
		Value: `//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Language = newLanguageTable()

type languageTable struct {
	postgres.Table

	//Columns
	LanguageID postgres.ColumnInteger
	Name       postgres.ColumnString
	LastUpdate postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type LanguageTable struct {
	languageTable

	EXCLUDED languageTable
}

// AS creates new LanguageTable with assigned alias
func (a *LanguageTable) AS(alias string) *LanguageTable {
	aliasTable := newLanguageTable()
	aliasTable.Table.ALIAS(alias)
	return aliasTable
}

func newLanguageTable() *LanguageTable {
	return &LanguageTable{
		languageTable: newLanguageTableImpl("dvds", "language"),
		EXCLUDED:      newLanguageTableImpl("", "excluded"),
	}
}

func newLanguageTableImpl(schemaName, tableName string) languageTable {
	var (
		LanguageIDColumn = postgres.IntegerColumn("language_id")
		NameColumn       = postgres.StringColumn("name")
		LastUpdateColumn = postgres.TimestampColumn("last_update")
		allColumns       = postgres.ColumnList{LanguageIDColumn, NameColumn, LastUpdateColumn}
		mutableColumns   = postgres.ColumnList{NameColumn, LastUpdateColumn}
	)

	return languageTable{
		Table: postgres.NewTable(schemaName, tableName, allColumns...),

		//Columns
		LanguageID: LanguageIDColumn,
		Name:       NameColumn,
		LastUpdate: LastUpdateColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
`,
	}, {
		Key: "/table/payment.go",
		Value: `//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Payment = newPaymentTable()

type paymentTable struct {
	postgres.Table

	//Columns
	PaymentID   postgres.ColumnInteger
	CustomerID  postgres.ColumnInteger
	StaffID     postgres.ColumnInteger
	RentalID    postgres.ColumnInteger
	Amount      postgres.ColumnFloat
	PaymentDate postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PaymentTable struct {
	paymentTable

	EXCLUDED paymentTable
}

// AS creates new PaymentTable with assigned alias
func (a *PaymentTable) AS(alias string) *PaymentTable {
	aliasTable := newPaymentTable()
	aliasTable.Table.ALIAS(alias)
	return aliasTable
}

func newPaymentTable() *PaymentTable {
	return &PaymentTable{
		paymentTable: newPaymentTableImpl("dvds", "payment"),
		EXCLUDED:     newPaymentTableImpl("", "excluded"),
	}
}

func newPaymentTableImpl(schemaName, tableName string) paymentTable {
	var (
		PaymentIDColumn   = postgres.IntegerColumn("payment_id")
		CustomerIDColumn  = postgres.IntegerColumn("customer_id")
		StaffIDColumn     = postgres.IntegerColumn("staff_id")
		RentalIDColumn    = postgres.IntegerColumn("rental_id")
		AmountColumn      = postgres.FloatColumn("amount")
		PaymentDateColumn = postgres.TimestampColumn("payment_date")
		allColumns        = postgres.ColumnList{PaymentIDColumn, CustomerIDColumn, StaffIDColumn, RentalIDColumn, AmountColumn, PaymentDateColumn}
		mutableColumns    = postgres.ColumnList{CustomerIDColumn, StaffIDColumn, RentalIDColumn, AmountColumn, PaymentDateColumn}
	)

	return paymentTable{
		Table: postgres.NewTable(schemaName, tableName, allColumns...),

		//Columns
		PaymentID:   PaymentIDColumn,
		CustomerID:  CustomerIDColumn,
		StaffID:     StaffIDColumn,
		RentalID:    RentalIDColumn,
		Amount:      AmountColumn,
		PaymentDate: PaymentDateColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
`,
	}, {
		Key: "/table/rental.go",
		Value: `//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Rental = newRentalTable()

type rentalTable struct {
	postgres.Table

	//Columns
	RentalID    postgres.ColumnInteger
	RentalDate  postgres.ColumnTimestamp
	InventoryID postgres.ColumnInteger
	CustomerID  postgres.ColumnInteger
	ReturnDate  postgres.ColumnTimestamp
	StaffID     postgres.ColumnInteger
	LastUpdate  postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type RentalTable struct {
	rentalTable

	EXCLUDED rentalTable
}

// AS creates new RentalTable with assigned alias
func (a *RentalTable) AS(alias string) *RentalTable {
	aliasTable := newRentalTable()
	aliasTable.Table.ALIAS(alias)
	return aliasTable
}

func newRentalTable() *RentalTable {
	return &RentalTable{
		rentalTable: newRentalTableImpl("dvds", "rental"),
		EXCLUDED:    newRentalTableImpl("", "excluded"),
	}
}

func newRentalTableImpl(schemaName, tableName string) rentalTable {
	var (
		RentalIDColumn    = postgres.IntegerColumn("rental_id")
		RentalDateColumn  = postgres.TimestampColumn("rental_date")
		InventoryIDColumn = postgres.IntegerColumn("inventory_id")
		CustomerIDColumn  = postgres.IntegerColumn("customer_id")
		ReturnDateColumn  = postgres.TimestampColumn("return_date")
		StaffIDColumn     = postgres.IntegerColumn("staff_id")
		LastUpdateColumn  = postgres.TimestampColumn("last_update")
		allColumns        = postgres.ColumnList{RentalIDColumn, RentalDateColumn, InventoryIDColumn, CustomerIDColumn, ReturnDateColumn, StaffIDColumn, LastUpdateColumn}
		mutableColumns    = postgres.ColumnList{RentalDateColumn, InventoryIDColumn, CustomerIDColumn, ReturnDateColumn, StaffIDColumn, LastUpdateColumn}
	)

	return rentalTable{
		Table: postgres.NewTable(schemaName, tableName, allColumns...),

		//Columns
		RentalID:    RentalIDColumn,
		RentalDate:  RentalDateColumn,
		InventoryID: InventoryIDColumn,
		CustomerID:  CustomerIDColumn,
		ReturnDate:  ReturnDateColumn,
		StaffID:     StaffIDColumn,
		LastUpdate:  LastUpdateColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
`,
	}, {
		Key: "/table/staff.go",
		Value: `//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Staff = newStaffTable()

type staffTable struct {
	postgres.Table

	//Columns
	StaffID    postgres.ColumnInteger
	FirstName  postgres.ColumnString
	LastName   postgres.ColumnString
	AddressID  postgres.ColumnInteger
	Email      postgres.ColumnString
	StoreID    postgres.ColumnInteger
	Active     postgres.ColumnBool
	Username   postgres.ColumnString
	Password   postgres.ColumnString
	LastUpdate postgres.ColumnTimestamp
	Picture    postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type StaffTable struct {
	staffTable

	EXCLUDED staffTable
}

// AS creates new StaffTable with assigned alias
func (a *StaffTable) AS(alias string) *StaffTable {
	aliasTable := newStaffTable()
	aliasTable.Table.ALIAS(alias)
	return aliasTable
}

func newStaffTable() *StaffTable {
	return &StaffTable{
		staffTable: newStaffTableImpl("dvds", "staff"),
		EXCLUDED:   newStaffTableImpl("", "excluded"),
	}
}

func newStaffTableImpl(schemaName, tableName string) staffTable {
	var (
		StaffIDColumn    = postgres.IntegerColumn("staff_id")
		FirstNameColumn  = postgres.StringColumn("first_name")
		LastNameColumn   = postgres.StringColumn("last_name")
		AddressIDColumn  = postgres.IntegerColumn("address_id")
		EmailColumn      = postgres.StringColumn("email")
		StoreIDColumn    = postgres.IntegerColumn("store_id")
		ActiveColumn     = postgres.BoolColumn("active")
		UsernameColumn   = postgres.StringColumn("username")
		PasswordColumn   = postgres.StringColumn("password")
		LastUpdateColumn = postgres.TimestampColumn("last_update")
		PictureColumn    = postgres.StringColumn("picture")
		allColumns       = postgres.ColumnList{StaffIDColumn, FirstNameColumn, LastNameColumn, AddressIDColumn, EmailColumn, StoreIDColumn, ActiveColumn, UsernameColumn, PasswordColumn, LastUpdateColumn, PictureColumn}
		mutableColumns   = postgres.ColumnList{FirstNameColumn, LastNameColumn, AddressIDColumn, EmailColumn, StoreIDColumn, ActiveColumn, UsernameColumn, PasswordColumn, LastUpdateColumn, PictureColumn}
	)

	return staffTable{
		Table: postgres.NewTable(schemaName, tableName, allColumns...),

		//Columns
		StaffID:    StaffIDColumn,
		FirstName:  FirstNameColumn,
		LastName:   LastNameColumn,
		AddressID:  AddressIDColumn,
		Email:      EmailColumn,
		StoreID:    StoreIDColumn,
		Active:     ActiveColumn,
		Username:   UsernameColumn,
		Password:   PasswordColumn,
		LastUpdate: LastUpdateColumn,
		Picture:    PictureColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
`,
	}, {
		Key: "/table/store.go",
		Value: `//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Store = newStoreTable()

type storeTable struct {
	postgres.Table

	//Columns
	StoreID        postgres.ColumnInteger
	ManagerStaffID postgres.ColumnInteger
	AddressID      postgres.ColumnInteger
	LastUpdate     postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type StoreTable struct {
	storeTable

	EXCLUDED storeTable
}

// AS creates new StoreTable with assigned alias
func (a *StoreTable) AS(alias string) *StoreTable {
	aliasTable := newStoreTable()
	aliasTable.Table.ALIAS(alias)
	return aliasTable
}

func newStoreTable() *StoreTable {
	return &StoreTable{
		storeTable: newStoreTableImpl("dvds", "store"),
		EXCLUDED:   newStoreTableImpl("", "excluded"),
	}
}

func newStoreTableImpl(schemaName, tableName string) storeTable {
	var (
		StoreIDColumn        = postgres.IntegerColumn("store_id")
		ManagerStaffIDColumn = postgres.IntegerColumn("manager_staff_id")
		AddressIDColumn      = postgres.IntegerColumn("address_id")
		LastUpdateColumn     = postgres.TimestampColumn("last_update")
		allColumns           = postgres.ColumnList{StoreIDColumn, ManagerStaffIDColumn, AddressIDColumn, LastUpdateColumn}
		mutableColumns       = postgres.ColumnList{ManagerStaffIDColumn, AddressIDColumn, LastUpdateColumn}
	)

	return storeTable{
		Table: postgres.NewTable(schemaName, tableName, allColumns...),

		//Columns
		StoreID:        StoreIDColumn,
		ManagerStaffID: ManagerStaffIDColumn,
		AddressID:      AddressIDColumn,
		LastUpdate:     LastUpdateColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
`,
	}, {
		Key: "/view/actor_info.go",
		Value: `//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package view

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ActorInfo = newActorInfoTable()

type actorInfoTable struct {
	postgres.Table

	//Columns
	ActorID   postgres.ColumnInteger
	FirstName postgres.ColumnString
	LastName  postgres.ColumnString
	FilmInfo  postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ActorInfoTable struct {
	actorInfoTable

	EXCLUDED actorInfoTable
}

// AS creates new ActorInfoTable with assigned alias
func (a *ActorInfoTable) AS(alias string) *ActorInfoTable {
	aliasTable := newActorInfoTable()
	aliasTable.Table.ALIAS(alias)
	return aliasTable
}

func newActorInfoTable() *ActorInfoTable {
	return &ActorInfoTable{
		actorInfoTable: newActorInfoTableImpl("dvds", "actor_info"),
		EXCLUDED:       newActorInfoTableImpl("", "excluded"),
	}
}

func newActorInfoTableImpl(schemaName, tableName string) actorInfoTable {
	var (
		ActorIDColumn   = postgres.IntegerColumn("actor_id")
		FirstNameColumn = postgres.StringColumn("first_name")
		LastNameColumn  = postgres.StringColumn("last_name")
		FilmInfoColumn  = postgres.StringColumn("film_info")
		allColumns      = postgres.ColumnList{ActorIDColumn, FirstNameColumn, LastNameColumn, FilmInfoColumn}
		mutableColumns  = postgres.ColumnList{ActorIDColumn, FirstNameColumn, LastNameColumn, FilmInfoColumn}
	)

	return actorInfoTable{
		Table: postgres.NewTable(schemaName, tableName, allColumns...),

		//Columns
		ActorID:   ActorIDColumn,
		FirstName: FirstNameColumn,
		LastName:  LastNameColumn,
		FilmInfo:  FilmInfoColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
`,
	}, {
		Key: "/view/customer_list.go",
		Value: `//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package view

import (
	"github.com/go-jet/jet/v2/postgres"
)

var CustomerList = newCustomerListTable()

type customerListTable struct {
	postgres.Table

	//Columns
	ID      postgres.ColumnInteger
	Name    postgres.ColumnString
	Address postgres.ColumnString
	ZipCode postgres.ColumnString
	Phone   postgres.ColumnString
	City    postgres.ColumnString
	Country postgres.ColumnString
	Notes   postgres.ColumnString
	Sid     postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CustomerListTable struct {
	customerListTable

	EXCLUDED customerListTable
}

// AS creates new CustomerListTable with assigned alias
func (a *CustomerListTable) AS(alias string) *CustomerListTable {
	aliasTable := newCustomerListTable()
	aliasTable.Table.ALIAS(alias)
	return aliasTable
}

func newCustomerListTable() *CustomerListTable {
	return &CustomerListTable{
		customerListTable: newCustomerListTableImpl("dvds", "customer_list"),
		EXCLUDED:          newCustomerListTableImpl("", "excluded"),
	}
}

func newCustomerListTableImpl(schemaName, tableName string) customerListTable {
	var (
		IDColumn       = postgres.IntegerColumn("id")
		NameColumn     = postgres.StringColumn("name")
		AddressColumn  = postgres.StringColumn("address")
		ZipCodeColumn  = postgres.StringColumn("zip code")
		PhoneColumn    = postgres.StringColumn("phone")
		CityColumn     = postgres.StringColumn("city")
		CountryColumn  = postgres.StringColumn("country")
		NotesColumn    = postgres.StringColumn("notes")
		SidColumn      = postgres.IntegerColumn("sid")
		allColumns     = postgres.ColumnList{IDColumn, NameColumn, AddressColumn, ZipCodeColumn, PhoneColumn, CityColumn, CountryColumn, NotesColumn, SidColumn}
		mutableColumns = postgres.ColumnList{IDColumn, NameColumn, AddressColumn, ZipCodeColumn, PhoneColumn, CityColumn, CountryColumn, NotesColumn, SidColumn}
	)

	return customerListTable{
		Table: postgres.NewTable(schemaName, tableName, allColumns...),

		//Columns
		ID:      IDColumn,
		Name:    NameColumn,
		Address: AddressColumn,
		ZipCode: ZipCodeColumn,
		Phone:   PhoneColumn,
		City:    CityColumn,
		Country: CountryColumn,
		Notes:   NotesColumn,
		Sid:     SidColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
`,
	}, {
		Key: "/view/film_list.go",
		Value: `//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package view

import (
	"github.com/go-jet/jet/v2/postgres"
)

var FilmList = newFilmListTable()

type filmListTable struct {
	postgres.Table

	//Columns
	Fid         postgres.ColumnInteger
	Title       postgres.ColumnString
	Description postgres.ColumnString
	Category    postgres.ColumnString
	Price       postgres.ColumnFloat
	Length      postgres.ColumnInteger
	Rating      postgres.ColumnString
	Actors      postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type FilmListTable struct {
	filmListTable

	EXCLUDED filmListTable
}

// AS creates new FilmListTable with assigned alias
func (a *FilmListTable) AS(alias string) *FilmListTable {
	aliasTable := newFilmListTable()
	aliasTable.Table.ALIAS(alias)
	return aliasTable
}

func newFilmListTable() *FilmListTable {
	return &FilmListTable{
		filmListTable: newFilmListTableImpl("dvds", "film_list"),
		EXCLUDED:      newFilmListTableImpl("", "excluded"),
	}
}

func newFilmListTableImpl(schemaName, tableName string) filmListTable {
	var (
		FidColumn         = postgres.IntegerColumn("fid")
		TitleColumn       = postgres.StringColumn("title")
		DescriptionColumn = postgres.StringColumn("description")
		CategoryColumn    = postgres.StringColumn("category")
		PriceColumn       = postgres.FloatColumn("price")
		LengthColumn      = postgres.IntegerColumn("length")
		RatingColumn      = postgres.StringColumn("rating")
		ActorsColumn      = postgres.StringColumn("actors")
		allColumns        = postgres.ColumnList{FidColumn, TitleColumn, DescriptionColumn, CategoryColumn, PriceColumn, LengthColumn, RatingColumn, ActorsColumn}
		mutableColumns    = postgres.ColumnList{FidColumn, TitleColumn, DescriptionColumn, CategoryColumn, PriceColumn, LengthColumn, RatingColumn, ActorsColumn}
	)

	return filmListTable{
		Table: postgres.NewTable(schemaName, tableName, allColumns...),

		//Columns
		Fid:         FidColumn,
		Title:       TitleColumn,
		Description: DescriptionColumn,
		Category:    CategoryColumn,
		Price:       PriceColumn,
		Length:      LengthColumn,
		Rating:      RatingColumn,
		Actors:      ActorsColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
`,
	}, {
		Key: "/view/nicer_but_slower_film_list.go",
		Value: `//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package view

import (
	"github.com/go-jet/jet/v2/postgres"
)

var NicerButSlowerFilmList = newNicerButSlowerFilmListTable()

type nicerButSlowerFilmListTable struct {
	postgres.Table

	//Columns
	Fid         postgres.ColumnInteger
	Title       postgres.ColumnString
	Description postgres.ColumnString
	Category    postgres.ColumnString
	Price       postgres.ColumnFloat
	Length      postgres.ColumnInteger
	Rating      postgres.ColumnString
	Actors      postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type NicerButSlowerFilmListTable struct {
	nicerButSlowerFilmListTable

	EXCLUDED nicerButSlowerFilmListTable
}

// AS creates new NicerButSlowerFilmListTable with assigned alias
func (a *NicerButSlowerFilmListTable) AS(alias string) *NicerButSlowerFilmListTable {
	aliasTable := newNicerButSlowerFilmListTable()
	aliasTable.Table.ALIAS(alias)
	return aliasTable
}

func newNicerButSlowerFilmListTable() *NicerButSlowerFilmListTable {
	return &NicerButSlowerFilmListTable{
		nicerButSlowerFilmListTable: newNicerButSlowerFilmListTableImpl("dvds", "nicer_but_slower_film_list"),
		EXCLUDED:                    newNicerButSlowerFilmListTableImpl("", "excluded"),
	}
}

func newNicerButSlowerFilmListTableImpl(schemaName, tableName string) nicerButSlowerFilmListTable {
	var (
		FidColumn         = postgres.IntegerColumn("fid")
		TitleColumn       = postgres.StringColumn("title")
		DescriptionColumn = postgres.StringColumn("description")
		CategoryColumn    = postgres.StringColumn("category")
		PriceColumn       = postgres.FloatColumn("price")
		LengthColumn      = postgres.IntegerColumn("length")
		RatingColumn      = postgres.StringColumn("rating")
		ActorsColumn      = postgres.StringColumn("actors")
		allColumns        = postgres.ColumnList{FidColumn, TitleColumn, DescriptionColumn, CategoryColumn, PriceColumn, LengthColumn, RatingColumn, ActorsColumn}
		mutableColumns    = postgres.ColumnList{FidColumn, TitleColumn, DescriptionColumn, CategoryColumn, PriceColumn, LengthColumn, RatingColumn, ActorsColumn}
	)

	return nicerButSlowerFilmListTable{
		Table: postgres.NewTable(schemaName, tableName, allColumns...),

		//Columns
		Fid:         FidColumn,
		Title:       TitleColumn,
		Description: DescriptionColumn,
		Category:    CategoryColumn,
		Price:       PriceColumn,
		Length:      LengthColumn,
		Rating:      RatingColumn,
		Actors:      ActorsColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
`,
	}, {
		Key: "/view/sales_by_film_category.go",
		Value: `//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package view

import (
	"github.com/go-jet/jet/v2/postgres"
)

var SalesByFilmCategory = newSalesByFilmCategoryTable()

type salesByFilmCategoryTable struct {
	postgres.Table

	//Columns
	Category   postgres.ColumnString
	TotalSales postgres.ColumnFloat

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SalesByFilmCategoryTable struct {
	salesByFilmCategoryTable

	EXCLUDED salesByFilmCategoryTable
}

// AS creates new SalesByFilmCategoryTable with assigned alias
func (a *SalesByFilmCategoryTable) AS(alias string) *SalesByFilmCategoryTable {
	aliasTable := newSalesByFilmCategoryTable()
	aliasTable.Table.ALIAS(alias)
	return aliasTable
}

func newSalesByFilmCategoryTable() *SalesByFilmCategoryTable {
	return &SalesByFilmCategoryTable{
		salesByFilmCategoryTable: newSalesByFilmCategoryTableImpl("dvds", "sales_by_film_category"),
		EXCLUDED:                 newSalesByFilmCategoryTableImpl("", "excluded"),
	}
}

func newSalesByFilmCategoryTableImpl(schemaName, tableName string) salesByFilmCategoryTable {
	var (
		CategoryColumn   = postgres.StringColumn("category")
		TotalSalesColumn = postgres.FloatColumn("total_sales")
		allColumns       = postgres.ColumnList{CategoryColumn, TotalSalesColumn}
		mutableColumns   = postgres.ColumnList{CategoryColumn, TotalSalesColumn}
	)

	return salesByFilmCategoryTable{
		Table: postgres.NewTable(schemaName, tableName, allColumns...),

		//Columns
		Category:   CategoryColumn,
		TotalSales: TotalSalesColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
`,
	}, {
		Key: "/view/sales_by_store.go",
		Value: `//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package view

import (
	"github.com/go-jet/jet/v2/postgres"
)

var SalesByStore = newSalesByStoreTable()

type salesByStoreTable struct {
	postgres.Table

	//Columns
	Store      postgres.ColumnString
	Manager    postgres.ColumnString
	TotalSales postgres.ColumnFloat

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SalesByStoreTable struct {
	salesByStoreTable

	EXCLUDED salesByStoreTable
}

// AS creates new SalesByStoreTable with assigned alias
func (a *SalesByStoreTable) AS(alias string) *SalesByStoreTable {
	aliasTable := newSalesByStoreTable()
	aliasTable.Table.ALIAS(alias)
	return aliasTable
}

func newSalesByStoreTable() *SalesByStoreTable {
	return &SalesByStoreTable{
		salesByStoreTable: newSalesByStoreTableImpl("dvds", "sales_by_store"),
		EXCLUDED:          newSalesByStoreTableImpl("", "excluded"),
	}
}

func newSalesByStoreTableImpl(schemaName, tableName string) salesByStoreTable {
	var (
		StoreColumn      = postgres.StringColumn("store")
		ManagerColumn    = postgres.StringColumn("manager")
		TotalSalesColumn = postgres.FloatColumn("total_sales")
		allColumns       = postgres.ColumnList{StoreColumn, ManagerColumn, TotalSalesColumn}
		mutableColumns   = postgres.ColumnList{StoreColumn, ManagerColumn, TotalSalesColumn}
	)

	return salesByStoreTable{
		Table: postgres.NewTable(schemaName, tableName, allColumns...),

		//Columns
		Store:      StoreColumn,
		Manager:    ManagerColumn,
		TotalSales: TotalSalesColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
`,
	}, {
		Key: "/view/staff_list.go",
		Value: `//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package view

import (
	"github.com/go-jet/jet/v2/postgres"
)

var StaffList = newStaffListTable()

type staffListTable struct {
	postgres.Table

	//Columns
	ID      postgres.ColumnInteger
	Name    postgres.ColumnString
	Address postgres.ColumnString
	ZipCode postgres.ColumnString
	Phone   postgres.ColumnString
	City    postgres.ColumnString
	Country postgres.ColumnString
	Sid     postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type StaffListTable struct {
	staffListTable

	EXCLUDED staffListTable
}

// AS creates new StaffListTable with assigned alias
func (a *StaffListTable) AS(alias string) *StaffListTable {
	aliasTable := newStaffListTable()
	aliasTable.Table.ALIAS(alias)
	return aliasTable
}

func newStaffListTable() *StaffListTable {
	return &StaffListTable{
		staffListTable: newStaffListTableImpl("dvds", "staff_list"),
		EXCLUDED:       newStaffListTableImpl("", "excluded"),
	}
}

func newStaffListTableImpl(schemaName, tableName string) staffListTable {
	var (
		IDColumn       = postgres.IntegerColumn("id")
		NameColumn     = postgres.StringColumn("name")
		AddressColumn  = postgres.StringColumn("address")
		ZipCodeColumn  = postgres.StringColumn("zip code")
		PhoneColumn    = postgres.StringColumn("phone")
		CityColumn     = postgres.StringColumn("city")
		CountryColumn  = postgres.StringColumn("country")
		SidColumn      = postgres.IntegerColumn("sid")
		allColumns     = postgres.ColumnList{IDColumn, NameColumn, AddressColumn, ZipCodeColumn, PhoneColumn, CityColumn, CountryColumn, SidColumn}
		mutableColumns = postgres.ColumnList{IDColumn, NameColumn, AddressColumn, ZipCodeColumn, PhoneColumn, CityColumn, CountryColumn, SidColumn}
	)

	return staffListTable{
		Table: postgres.NewTable(schemaName, tableName, allColumns...),

		//Columns
		ID:      IDColumn,
		Name:    NameColumn,
		Address: AddressColumn,
		ZipCode: ZipCodeColumn,
		Phone:   PhoneColumn,
		City:    CityColumn,
		Country: CountryColumn,
		Sid:     SidColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
`,
	}, {
		Key:   "fileNames",
		Value: []string{"/enum/mpaa_rating.go", "/model/actor.go", "/model/actor_info.go", "/model/address.go", "/model/category.go", "/model/city.go", "/model/country.go", "/model/customer.go", "/model/customer_list.go", "/model/film.go", "/model/film_actor.go", "/model/film_category.go", "/model/film_list.go", "/model/inventory.go", "/model/language.go", "/model/mpaa_rating.go", "/model/nicer_but_slower_film_list.go", "/model/payment.go", "/model/rental.go", "/model/sales_by_film_category.go", "/model/sales_by_store.go", "/model/staff.go", "/model/staff_list.go", "/model/store.go", "/table/actor.go", "/table/address.go", "/table/category.go", "/table/city.go", "/table/country.go", "/table/customer.go", "/table/film.go", "/table/film_actor.go", "/table/film_category.go", "/table/inventory.go", "/table/language.go", "/table/payment.go", "/table/rental.go", "/table/staff.go", "/table/store.go", "/view/actor_info.go", "/view/customer_list.go", "/view/film_list.go", "/view/nicer_but_slower_film_list.go", "/view/sales_by_film_category.go", "/view/sales_by_store.go", "/view/staff_list.go"},
	}})
}
