// Code generated by testparrot. DO NOT EDIT.

package postgres

import (
	model "github.com/go-jet/jet/v2/tests/postgres/gen/dvds/model"
	gotestparrot "github.com/xtruder/go-testparrot"
	"time"
)

func init() {
	gotestparrot.R.Load("TestAllSetOperators/EXCEPT", []gotestparrot.Recording{{
		Key:   0,
		Value: 10,
	}})
	gotestparrot.R.Load("TestAllSetOperators/EXCEPT_ALL", []gotestparrot.Recording{{
		Key:   0,
		Value: 10,
	}})
	gotestparrot.R.Load("TestAllSetOperators/INTERSECT", []gotestparrot.Recording{{
		Key:   0,
		Value: 0,
	}})
	gotestparrot.R.Load("TestAllSetOperators/INTERSECT_ALL", []gotestparrot.Recording{{
		Key:   0,
		Value: 0,
	}})
	gotestparrot.R.Load("TestAllSetOperators/UNION", []gotestparrot.Recording{{
		Key:   0,
		Value: 20,
	}})
	gotestparrot.R.Load("TestAllSetOperators/UNION_ALL", []gotestparrot.Recording{{
		Key:   0,
		Value: 20,
	}})
	gotestparrot.R.Load("TestClassicSelect", []gotestparrot.Recording{{
		Key: 0,
		Value: `
SELECT payment.payment_id AS "payment.payment_id",
     payment.customer_id AS "payment.customer_id",
     payment.staff_id AS "payment.staff_id",
     payment.rental_id AS "payment.rental_id",
     payment.amount AS "payment.amount",
     payment.payment_date AS "payment.payment_date",
     customer.customer_id AS "customer.customer_id",
     customer.store_id AS "customer.store_id",
     customer.first_name AS "customer.first_name",
     customer.last_name AS "customer.last_name",
     customer.email AS "customer.email",
     customer.address_id AS "customer.address_id",
     customer.activebool AS "customer.activebool",
     customer.create_date AS "customer.create_date",
     customer.last_update AS "customer.last_update",
     customer.active AS "customer.active"
FROM dvds.payment
     INNER JOIN dvds.customer ON (payment.customer_id = customer.customer_id)
ORDER BY payment.payment_id ASC
LIMIT 2;
`,
	}, {
		Key: 1,
		Value: []model.Payment{{
			Amount:      7.99,
			CustomerID:  int16(341),
			PaymentDate: gotestparrot.Decode("2007-02-15T22:25:46.996577Z", time.Time{}).(time.Time),
			PaymentID:   int32(17503),
			RentalID:    int32(1520),
			StaffID:     int16(2),
		}, {
			Amount:      1.99,
			CustomerID:  int16(341),
			PaymentDate: gotestparrot.Decode("2007-02-16T17:23:14.996577Z", time.Time{}).(time.Time),
			PaymentID:   int32(17504),
			RentalID:    int32(1778),
			StaffID:     int16(1),
		}},
	}})
	gotestparrot.R.Load("TestDynamicCondition", []gotestparrot.Recording{{
		Key: 0,
		Value: `
SELECT customer.customer_id AS "customer.customer_id",
     customer.store_id AS "customer.store_id",
     customer.first_name AS "customer.first_name",
     customer.last_name AS "customer.last_name",
     customer.email AS "customer.email",
     customer.address_id AS "customer.address_id",
     customer.activebool AS "customer.activebool",
     customer.create_date AS "customer.create_date",
     customer.last_update AS "customer.last_update",
     customer.active AS "customer.active"
FROM dvds.customer
WHERE (TRUE AND (customer.customer_id = 1)) AND (customer.activebool = TRUE);
`,
	}, {
		Key:   1,
		Value: 1,
	}})
	gotestparrot.R.Load("TestDynamicProjectionList", []gotestparrot.Recording{{
		Key: 0,
		Value: `
SELECT customer.customer_id AS "customer.customer_id",
     customer.create_date AS "customer.create_date"
FROM dvds.customer
LIMIT 3;
`,
	}, {
		Key:   1,
		Value: 3,
	}})
	gotestparrot.R.Load("TestExecution1", []gotestparrot.Recording{{
		Key: 0,
		Value: `
SELECT city.city_id AS "city.city_id",
     city.city AS "city.city",
     address.address_id AS "address.address_id",
     address.address AS "address.address",
     customer.customer_id AS "customer.customer_id",
     customer.last_name AS "customer.last_name"
FROM dvds.city
     INNER JOIN dvds.address ON (address.city_id = city.city_id)
     INNER JOIN dvds.customer ON (customer.address_id = address.address_id)
WHERE (city.city = 'London') OR (city.city = 'York')
ORDER BY city.city_id, address.address_id, customer.customer_id;
`,
	}, {
		Key: 1,
		Value: []struct {
			model.City
			Customers []struct {
				model.Customer
				Address model.Address
			}
		}{{
			City: model.City{
				City:   "London",
				CityID: int32(312),
			},
			Customers: []struct {
				model.Customer
				Address model.Address
			}{{
				Address: model.Address{
					Address:   "1497 Yuzhou Drive",
					AddressID: int32(256),
				},
				Customer: model.Customer{
					CustomerID: int32(252),
					LastName:   "Hoffman",
				},
			}, {
				Address: model.Address{
					Address:   "548 Uruapan Street",
					AddressID: int32(517),
				},
				Customer: model.Customer{
					CustomerID: int32(512),
					LastName:   "Vines",
				},
			}},
		}, {
			City: model.City{
				City:   "York",
				CityID: int32(589),
			},
			Customers: []struct {
				model.Customer
				Address model.Address
			}{{
				Address: model.Address{
					Address:   "1515 Korla Way",
					AddressID: int32(502),
				},
				Customer: model.Customer{
					CustomerID: int32(497),
					LastName:   "Sledge",
				},
			}},
		}},
	}})
	gotestparrot.R.Load("TestExecution2", []gotestparrot.Recording{{
		Key: 0,
		Value: `
SELECT city.city_id AS "my_city.id",
     city.city AS "myCity.Name",
     address.address_id AS "My_Address.id",
     address.address AS "my address.address line",
     customer.customer_id AS "my_customer.id",
     customer.last_name AS "my_customer.last_name"
FROM dvds.city
     INNER JOIN dvds.address ON (address.city_id = city.city_id)
     INNER JOIN dvds.customer ON (customer.address_id = address.address_id)
WHERE (city.city = 'London') OR (city.city = 'York')
ORDER BY city.city_id, address.address_id, customer.customer_id;
`,
	}, {
		Key: 1,
		Value: []struct {
			ID        int32 `sql:"primary_key"`
			Name      string
			Customers []struct {
				ID       int32 `sql:"primary_key"`
				LastName *string
				Address  struct {
					ID          int32 `sql:"primary_key"`
					AddressLine string
				}
			}
		}{},
	}})
	gotestparrot.R.Load("TestExecution3", []gotestparrot.Recording{{
		Key: 0,
		Value: `
SELECT city.city_id AS "city_id",
     city.city AS "city_name",
     customer.customer_id AS "customer_id",
     customer.last_name AS "last_name",
     address.address_id AS "address_id",
     address.address AS "address_line"
FROM dvds.city
     INNER JOIN dvds.address ON (address.city_id = city.city_id)
     INNER JOIN dvds.customer ON (customer.address_id = address.address_id)
WHERE (city.city = 'London') OR (city.city = 'York')
ORDER BY city.city_id, address.address_id, customer.customer_id;
`,
	}, {
		Key: 1,
		Value: []struct {
			CityID    int32 `sql:"primary_key"`
			CityName  string
			Customers []struct {
				CustomerID int32 `sql:"primary_key"`
				LastName   *string
				Address    struct {
					AddressID   int32 `sql:"primary_key"`
					AddressLine string
				}
			}
		}{{
			CityID:   int32(312),
			CityName: "London",
			Customers: []struct {
				CustomerID int32 `sql:"primary_key"`
				LastName   *string
				Address    struct {
					AddressID   int32 `sql:"primary_key"`
					AddressLine string
				}
			}{{
				Address: struct {
					AddressID   int32 `sql:"primary_key"`
					AddressLine string
				}{
					AddressID:   int32(256),
					AddressLine: "1497 Yuzhou Drive",
				},
				CustomerID: int32(252),
				LastName:   gotestparrot.Ptr("Hoffman").(*string),
			}, {
				Address: struct {
					AddressID   int32 `sql:"primary_key"`
					AddressLine string
				}{
					AddressID:   int32(517),
					AddressLine: "548 Uruapan Street",
				},
				CustomerID: int32(512),
				LastName:   gotestparrot.Ptr("Vines").(*string),
			}},
		}, {
			CityID:   int32(589),
			CityName: "York",
			Customers: []struct {
				CustomerID int32 `sql:"primary_key"`
				LastName   *string
				Address    struct {
					AddressID   int32 `sql:"primary_key"`
					AddressLine string
				}
			}{{
				Address: struct {
					AddressID   int32 `sql:"primary_key"`
					AddressLine string
				}{
					AddressID:   int32(502),
					AddressLine: "1515 Korla Way",
				},
				CustomerID: int32(497),
				LastName:   gotestparrot.Ptr("Sledge").(*string),
			}},
		}},
	}})
	gotestparrot.R.Load("TestExecution4", []gotestparrot.Recording{{
		Key: 0,
		Value: `
SELECT city.city_id AS "city.city_id",
     city.city AS "city.city",
     customer.customer_id AS "customer.customer_id",
     customer.last_name AS "customer.last_name",
     address.address_id AS "address.address_id",
     address.address AS "address.address"
FROM dvds.city
     INNER JOIN dvds.address ON (address.city_id = city.city_id)
     INNER JOIN dvds.customer ON (customer.address_id = address.address_id)
WHERE (city.city = 'London') OR (city.city = 'York')
ORDER BY city.city_id, address.address_id, customer.customer_id;
`,
	}, {
		Key: 1,
		Value: []struct {
			CityID    int32  `sql:"primary_key" alias:"city.city_id"`
			CityName  string `alias:"city.city"`
			Customers []struct {
				CustomerID int32   `sql:"primary_key" alias:"customer_id"`
				LastName   *string `alias:"last_name"`
				Address    struct {
					AddressID   int32  `sql:"primary_key" alias:"AddressId"`
					AddressLine string `alias:"address.address"`
				} `alias:"address.*"`
			} `alias:"customer"`
		}{{
			CityID:   int32(312),
			CityName: "London",
			Customers: []struct {
				CustomerID int32   `sql:"primary_key" alias:"customer_id"`
				LastName   *string `alias:"last_name"`
				Address    struct {
					AddressID   int32  `sql:"primary_key" alias:"AddressId"`
					AddressLine string `alias:"address.address"`
				} `alias:"address.*"`
			}{{
				Address: struct {
					AddressID   int32  `sql:"primary_key" alias:"AddressId"`
					AddressLine string `alias:"address.address"`
				}{
					AddressID:   int32(256),
					AddressLine: "1497 Yuzhou Drive",
				},
				CustomerID: int32(252),
				LastName:   gotestparrot.Ptr("Hoffman").(*string),
			}, {
				Address: struct {
					AddressID   int32  `sql:"primary_key" alias:"AddressId"`
					AddressLine string `alias:"address.address"`
				}{
					AddressID:   int32(517),
					AddressLine: "548 Uruapan Street",
				},
				CustomerID: int32(512),
				LastName:   gotestparrot.Ptr("Vines").(*string),
			}},
		}, {
			CityID:   int32(589),
			CityName: "York",
			Customers: []struct {
				CustomerID int32   `sql:"primary_key" alias:"customer_id"`
				LastName   *string `alias:"last_name"`
				Address    struct {
					AddressID   int32  `sql:"primary_key" alias:"AddressId"`
					AddressLine string `alias:"address.address"`
				} `alias:"address.*"`
			}{{
				Address: struct {
					AddressID   int32  `sql:"primary_key" alias:"AddressId"`
					AddressLine string `alias:"address.address"`
				}{
					AddressID:   int32(502),
					AddressLine: "1515 Korla Way",
				},
				CustomerID: int32(497),
				LastName:   gotestparrot.Ptr("Sledge").(*string),
			}},
		}},
	}})
	gotestparrot.R.Load("TestExpressionWrappers", []gotestparrot.Recording{{
		Key: 0,
		Value: `
SELECT true,
     11,
     11.22,
     'stringer',
     'raw',
     'raw',
     'raw',
     'raw',
     'date',
     '{"key": "value"}',
     '{"key": "value"}';
`,
	}})
	gotestparrot.R.Load("TestJoinQuerySlice", []gotestparrot.Recording{{
		Key: 0,
		Value: `
SELECT language.language_id AS "language.language_id",
     language.name AS "language.name",
     language.last_update AS "language.last_update",
     film.film_id AS "film.film_id",
     film.title AS "film.title",
     film.description AS "film.description",
     film.release_year AS "film.release_year",
     film.language_id AS "film.language_id",
     film.rental_duration AS "film.rental_duration",
     film.rental_rate AS "film.rental_rate",
     film.length AS "film.length",
     film.replacement_cost AS "film.replacement_cost",
     film.rating AS "film.rating",
     film.last_update AS "film.last_update",
     film.special_features AS "film.special_features",
     film.fulltext AS "film.fulltext"
FROM dvds.film
     INNER JOIN dvds.language ON (film.language_id = language.language_id)
WHERE film.rating = 'NC-17'
LIMIT 15;
`,
	}, {
		Key: 1,
		Value: []struct {
			Language *model.Language
			Film     []model.Film
		}{{
			Film: []model.Film{{
				Description:     gotestparrot.Ptr("A Fateful Reflection of a Moose And a Husband who must Overcome a Monkey in Nigeria").(*string),
				FilmID:          int32(133),
				Fulltext:        "'chamber':1 'fate':4 'husband':11 'italian':2 'monkey':16 'moos':8 'must':13 'nigeria':18 'overcom':14 'reflect':5",
				LanguageID:      int16(1),
				LastUpdate:      gotestparrot.Decode("2013-05-26T14:50:58.951Z", time.Time{}).(time.Time),
				Length:          gotestparrot.Ptr(int16(117)).(*int16),
				Rating:          gotestparrot.Ptr(model.MpaaRating("NC-17")).(*model.MpaaRating),
				ReleaseYear:     gotestparrot.Ptr(int32(2006)).(*int32),
				RentalDuration:  int16(7),
				RentalRate:      4.99,
				ReplacementCost: 14.99,
				SpecialFeatures: gotestparrot.Ptr("{Trailers}").(*string),
				Title:           "Chamber Italian",
			}, {
				Description:     gotestparrot.Ptr("A Astounding Reflection of a Lumberjack And a Car who must Sink a Lumberjack in A Baloon Factory").(*string),
				FilmID:          int32(3),
				Fulltext:        "'adapt':1 'astound':4 'baloon':19 'car':11 'factori':20 'hole':2 'lumberjack':8,16 'must':13 'reflect':5 'sink':14",
				LanguageID:      int16(1),
				LastUpdate:      gotestparrot.Decode("2013-05-26T14:50:58.951Z", time.Time{}).(time.Time),
				Length:          gotestparrot.Ptr(int16(50)).(*int16),
				Rating:          gotestparrot.Ptr(model.MpaaRating("NC-17")).(*model.MpaaRating),
				ReleaseYear:     gotestparrot.Ptr(int32(2006)).(*int32),
				RentalDuration:  int16(7),
				RentalRate:      2.99,
				ReplacementCost: 18.99,
				SpecialFeatures: gotestparrot.Ptr("{Trailers,\"Deleted Scenes\"}").(*string),
				Title:           "Adaptation Holes",
			}, {
				Description:     gotestparrot.Ptr("A Action-Packed Tale of a Man And a Lumberjack who must Reach a Feminist in Ancient China").(*string),
				FilmID:          int32(10),
				Fulltext:        "'action':5 'action-pack':4 'aladdin':1 'ancient':20 'calendar':2 'china':21 'feminist':18 'lumberjack':13 'man':10 'must':15 'pack':6 'reach':16 'tale':7",
				LanguageID:      int16(1),
				LastUpdate:      gotestparrot.Decode("2013-05-26T14:50:58.951Z", time.Time{}).(time.Time),
				Length:          gotestparrot.Ptr(int16(63)).(*int16),
				Rating:          gotestparrot.Ptr(model.MpaaRating("NC-17")).(*model.MpaaRating),
				ReleaseYear:     gotestparrot.Ptr(int32(2006)).(*int32),
				RentalDuration:  int16(6),
				RentalRate:      4.99,
				ReplacementCost: 24.99,
				SpecialFeatures: gotestparrot.Ptr("{Trailers,\"Deleted Scenes\"}").(*string),
				Title:           "Aladdin Calendar",
			}, {
				Description:     gotestparrot.Ptr("A Emotional Drama of a A Shark And a Database Administrator who must Vanquish a Pioneer in Soviet Georgia").(*string),
				FilmID:          int32(14),
				Fulltext:        "'administr':13 'alic':1 'databas':12 'drama':5 'emot':4 'fantasia':2 'georgia':21 'must':15 'pioneer':18 'shark':9 'soviet':20 'vanquish':16",
				LanguageID:      int16(1),
				LastUpdate:      gotestparrot.Decode("2013-05-26T14:50:58.951Z", time.Time{}).(time.Time),
				Length:          gotestparrot.Ptr(int16(94)).(*int16),
				Rating:          gotestparrot.Ptr(model.MpaaRating("NC-17")).(*model.MpaaRating),
				ReleaseYear:     gotestparrot.Ptr(int32(2006)).(*int32),
				RentalDuration:  int16(6),
				RentalRate:      0.99,
				ReplacementCost: 23.99,
				SpecialFeatures: gotestparrot.Ptr("{Trailers,\"Deleted Scenes\",\"Behind the Scenes\"}").(*string),
				Title:           "Alice Fantasia",
			}, {
				Description:     gotestparrot.Ptr("A Brilliant Drama of a Cat And a Mad Scientist who must Battle a Feminist in A MySQL Convention").(*string),
				FilmID:          int32(15),
				Fulltext:        "'alien':1 'battl':15 'brilliant':4 'cat':8 'center':2 'convent':21 'drama':5 'feminist':17 'mad':11 'must':14 'mysql':20 'scientist':12",
				LanguageID:      int16(1),
				LastUpdate:      gotestparrot.Decode("2013-05-26T14:50:58.951Z", time.Time{}).(time.Time),
				Length:          gotestparrot.Ptr(int16(46)).(*int16),
				Rating:          gotestparrot.Ptr(model.MpaaRating("NC-17")).(*model.MpaaRating),
				ReleaseYear:     gotestparrot.Ptr(int32(2006)).(*int32),
				RentalDuration:  int16(5),
				RentalRate:      2.99,
				ReplacementCost: 10.99,
				SpecialFeatures: gotestparrot.Ptr("{Trailers,Commentaries,\"Behind the Scenes\"}").(*string),
				Title:           "Alien Center",
			}, {
				Description:     gotestparrot.Ptr("A Fast-Paced Drama of a Robot And a Composer who must Battle a Astronaut in New Orleans").(*string),
				FilmID:          int32(16),
				Fulltext:        "'alley':1 'astronaut':18 'battl':16 'compos':13 'drama':7 'evolut':2 'fast':5 'fast-pac':4 'must':15 'new':20 'orlean':21 'pace':6 'robot':10",
				LanguageID:      int16(1),
				LastUpdate:      gotestparrot.Decode("2013-05-26T14:50:58.951Z", time.Time{}).(time.Time),
				Length:          gotestparrot.Ptr(int16(180)).(*int16),
				Rating:          gotestparrot.Ptr(model.MpaaRating("NC-17")).(*model.MpaaRating),
				ReleaseYear:     gotestparrot.Ptr(int32(2006)).(*int32),
				RentalDuration:  int16(6),
				RentalRate:      2.99,
				ReplacementCost: 23.99,
				SpecialFeatures: gotestparrot.Ptr("{Trailers,Commentaries}").(*string),
				Title:           "Alley Evolution",
			}, {
				Description:     gotestparrot.Ptr("A Amazing Reflection of a Database Administrator And a Astronaut who must Outrace a Database Administrator in A Shark Tank").(*string),
				FilmID:          int32(27),
				Fulltext:        "'administr':9,18 'amaz':4 'anonym':1 'astronaut':12 'databas':8,17 'human':2 'must':14 'outrac':15 'reflect':5 'shark':21 'tank':22",
				LanguageID:      int16(1),
				LastUpdate:      gotestparrot.Decode("2013-05-26T14:50:58.951Z", time.Time{}).(time.Time),
				Length:          gotestparrot.Ptr(int16(179)).(*int16),
				Rating:          gotestparrot.Ptr(model.MpaaRating("NC-17")).(*model.MpaaRating),
				ReleaseYear:     gotestparrot.Ptr(int32(2006)).(*int32),
				RentalDuration:  int16(7),
				RentalRate:      0.99,
				ReplacementCost: 12.99,
				SpecialFeatures: gotestparrot.Ptr("{\"Deleted Scenes\",\"Behind the Scenes\"}").(*string),
				Title:           "Anonymous Human",
			}, {
				Description:     gotestparrot.Ptr("A Fateful Yarn of a Womanizer And a Feminist who must Succumb a Database Administrator in Ancient India").(*string),
				FilmID:          int32(29),
				Fulltext:        "'administr':17 'ancient':19 'antitrust':1 'databas':16 'fate':4 'feminist':11 'india':20 'must':13 'succumb':14 'tomato':2 'woman':8 'yarn':5",
				LanguageID:      int16(1),
				LastUpdate:      gotestparrot.Decode("2013-05-26T14:50:58.951Z", time.Time{}).(time.Time),
				Length:          gotestparrot.Ptr(int16(168)).(*int16),
				Rating:          gotestparrot.Ptr(model.MpaaRating("NC-17")).(*model.MpaaRating),
				ReleaseYear:     gotestparrot.Ptr(int32(2006)).(*int32),
				RentalDuration:  int16(5),
				RentalRate:      2.99,
				ReplacementCost: 11.99,
				SpecialFeatures: gotestparrot.Ptr("{Trailers,Commentaries,\"Deleted Scenes\"}").(*string),
				Title:           "Antitrust Tomatoes",
			}, {
				Description:     gotestparrot.Ptr("A Awe-Inspiring Reflection of a Pastry Chef And a Teacher who must Overcome a Sumo Wrestler in A U-Boat").(*string),
				FilmID:          int32(31),
				Fulltext:        "'apach':1 'awe':5 'awe-inspir':4 'boat':25 'chef':11 'divin':2 'inspir':6 'must':16 'overcom':17 'pastri':10 'reflect':7 'sumo':19 'teacher':14 'u':24 'u-boat':23 'wrestler':20",
				LanguageID:      int16(1),
				LastUpdate:      gotestparrot.Decode("2013-05-26T14:50:58.951Z", time.Time{}).(time.Time),
				Length:          gotestparrot.Ptr(int16(92)).(*int16),
				Rating:          gotestparrot.Ptr(model.MpaaRating("NC-17")).(*model.MpaaRating),
				ReleaseYear:     gotestparrot.Ptr(int32(2006)).(*int32),
				RentalDuration:  int16(5),
				RentalRate:      4.99,
				ReplacementCost: 16.99,
				SpecialFeatures: gotestparrot.Ptr("{Commentaries,\"Deleted Scenes\",\"Behind the Scenes\"}").(*string),
				Title:           "Apache Divine",
			}, {
				Description:     gotestparrot.Ptr("A Touching Epistle of a Madman And a Mad Cow who must Defeat a Student in Nigeria").(*string),
				FilmID:          int32(34),
				Fulltext:        "'arabia':1 'cow':12 'defeat':15 'dogma':2 'epistl':5 'mad':11 'madman':8 'must':14 'nigeria':19 'student':17 'touch':4",
				LanguageID:      int16(1),
				LastUpdate:      gotestparrot.Decode("2013-05-26T14:50:58.951Z", time.Time{}).(time.Time),
				Length:          gotestparrot.Ptr(int16(62)).(*int16),
				Rating:          gotestparrot.Ptr(model.MpaaRating("NC-17")).(*model.MpaaRating),
				ReleaseYear:     gotestparrot.Ptr(int32(2006)).(*int32),
				RentalDuration:  int16(6),
				RentalRate:      0.99,
				ReplacementCost: 29.99,
				SpecialFeatures: gotestparrot.Ptr("{Commentaries,\"Deleted Scenes\"}").(*string),
				Title:           "Arabia Dogma",
			}, {
				Description:     gotestparrot.Ptr("A Beautiful Yarn of a Pioneer And a Monkey who must Pursue a Explorer in The Sahara Desert").(*string),
				FilmID:          int32(38),
				Fulltext:        "'ark':1 'beauti':4 'desert':20 'explor':16 'monkey':11 'must':13 'pioneer':8 'pursu':14 'ridgemont':2 'sahara':19 'yarn':5",
				LanguageID:      int16(1),
				LastUpdate:      gotestparrot.Decode("2013-05-26T14:50:58.951Z", time.Time{}).(time.Time),
				Length:          gotestparrot.Ptr(int16(68)).(*int16),
				Rating:          gotestparrot.Ptr(model.MpaaRating("NC-17")).(*model.MpaaRating),
				ReleaseYear:     gotestparrot.Ptr(int32(2006)).(*int32),
				RentalDuration:  int16(6),
				RentalRate:      0.99,
				ReplacementCost: 25.99,
				SpecialFeatures: gotestparrot.Ptr("{Trailers,Commentaries,\"Deleted Scenes\",\"Behind the Scenes\"}").(*string),
				Title:           "Ark Ridgemont",
			}, {
				Description:     gotestparrot.Ptr("A Stunning Reflection of a Robot And a Moose who must Challenge a Woman in California").(*string),
				FilmID:          int32(42),
				Fulltext:        "'artist':1 'california':18 'challeng':14 'coldblood':2 'moos':11 'must':13 'reflect':5 'robot':8 'stun':4 'woman':16",
				LanguageID:      int16(1),
				LastUpdate:      gotestparrot.Decode("2013-05-26T14:50:58.951Z", time.Time{}).(time.Time),
				Length:          gotestparrot.Ptr(int16(170)).(*int16),
				Rating:          gotestparrot.Ptr(model.MpaaRating("NC-17")).(*model.MpaaRating),
				ReleaseYear:     gotestparrot.Ptr(int32(2006)).(*int32),
				RentalDuration:  int16(5),
				RentalRate:      2.99,
				ReplacementCost: 10.99,
				SpecialFeatures: gotestparrot.Ptr("{Trailers,\"Behind the Scenes\"}").(*string),
				Title:           "Artist Coldblooded",
			}, {
				Description:     gotestparrot.Ptr("A Boring Character Study of a A Shark And a Girl who must Outrace a Feminist in An Abandoned Mine Shaft").(*string),
				FilmID:          int32(47),
				Fulltext:        "'abandon':21 'babi':1 'bore':4 'charact':5 'feminist':18 'girl':13 'hall':2 'mine':22 'must':15 'outrac':16 'shaft':23 'shark':10 'studi':6",
				LanguageID:      int16(1),
				LastUpdate:      gotestparrot.Decode("2013-05-26T14:50:58.951Z", time.Time{}).(time.Time),
				Length:          gotestparrot.Ptr(int16(153)).(*int16),
				Rating:          gotestparrot.Ptr(model.MpaaRating("NC-17")).(*model.MpaaRating),
				ReleaseYear:     gotestparrot.Ptr(int32(2006)).(*int32),
				RentalDuration:  int16(5),
				RentalRate:      4.99,
				ReplacementCost: 23.99,
				SpecialFeatures: gotestparrot.Ptr("{Commentaries}").(*string),
				Title:           "Baby Hall",
			}, {
				Description:     gotestparrot.Ptr("A Insightful Panorama of a Forensic Psychologist And a Mad Cow who must Build a Mad Scientist in The First Manned Space Station").(*string),
				FilmID:          int32(51),
				Fulltext:        "'balloon':1 'build':16 'cow':13 'first':22 'forens':8 'homeward':2 'insight':4 'mad':12,18 'man':23 'must':15 'panorama':5 'psychologist':9 'scientist':19 'space':24 'station':25",
				LanguageID:      int16(1),
				LastUpdate:      gotestparrot.Decode("2013-05-26T14:50:58.951Z", time.Time{}).(time.Time),
				Length:          gotestparrot.Ptr(int16(75)).(*int16),
				Rating:          gotestparrot.Ptr(model.MpaaRating("NC-17")).(*model.MpaaRating),
				ReleaseYear:     gotestparrot.Ptr(int32(2006)).(*int32),
				RentalDuration:  int16(5),
				RentalRate:      2.99,
				ReplacementCost: 10.99,
				SpecialFeatures: gotestparrot.Ptr("{\"Deleted Scenes\"}").(*string),
				Title:           "Balloon Homeward",
			}, {
				Description:     gotestparrot.Ptr("A Epic Drama of a Madman And a Cat who must Face a A Shark in An Abandoned Amusement Park").(*string),
				FilmID:          int32(53),
				Fulltext:        "'abandon':20 'amus':21 'bang':1 'cat':11 'drama':5 'epic':4 'face':14 'kwai':2 'madman':8 'must':13 'park':22 'shark':17",
				LanguageID:      int16(1),
				LastUpdate:      gotestparrot.Decode("2013-05-26T14:50:58.951Z", time.Time{}).(time.Time),
				Length:          gotestparrot.Ptr(int16(87)).(*int16),
				Rating:          gotestparrot.Ptr(model.MpaaRating("NC-17")).(*model.MpaaRating),
				ReleaseYear:     gotestparrot.Ptr(int32(2006)).(*int32),
				RentalDuration:  int16(5),
				RentalRate:      2.99,
				ReplacementCost: 25.99,
				SpecialFeatures: gotestparrot.Ptr("{Commentaries,\"Deleted Scenes\",\"Behind the Scenes\"}").(*string),
				Title:           "Bang Kwai",
			}},
			Language: &model.Language{
				LanguageID: int32(1),
				LastUpdate: gotestparrot.Decode("2006-02-15T10:02:19Z", time.Time{}).(time.Time),
				Name:       "English             ",
			},
		}},
	}})
	gotestparrot.R.Load("TestJoinQuerySliceWithPtrs", []gotestparrot.Recording{{
		Key: 0,
		Value: `
SELECT language.language_id AS "language.language_id",
     language.name AS "language.name",
     language.last_update AS "language.last_update",
     film.film_id AS "film.film_id",
     film.title AS "film.title",
     film.description AS "film.description",
     film.release_year AS "film.release_year",
     film.language_id AS "film.language_id",
     film.rental_duration AS "film.rental_duration",
     film.rental_rate AS "film.rental_rate",
     film.length AS "film.length",
     film.replacement_cost AS "film.replacement_cost",
     film.rating AS "film.rating",
     film.last_update AS "film.last_update",
     film.special_features AS "film.special_features",
     film.fulltext AS "film.fulltext"
FROM dvds.film
     INNER JOIN dvds.language ON (film.language_id = language.language_id)
LIMIT 3;
`,
	}})
	gotestparrot.R.Load("TestJoinQueryStruct", []gotestparrot.Recording{{
		Key: 0,
		Value: `
SELECT film_actor.actor_id AS "film_actor.actor_id",
     film_actor.film_id AS "film_actor.film_id",
     film_actor.last_update AS "film_actor.last_update",
     film.film_id AS "film.film_id",
     film.title AS "film.title",
     film.description AS "film.description",
     film.release_year AS "film.release_year",
     film.language_id AS "film.language_id",
     film.rental_duration AS "film.rental_duration",
     film.rental_rate AS "film.rental_rate",
     film.length AS "film.length",
     film.replacement_cost AS "film.replacement_cost",
     film.rating AS "film.rating",
     film.last_update AS "film.last_update",
     film.special_features AS "film.special_features",
     film.fulltext AS "film.fulltext",
     language.language_id AS "language.language_id",
     language.name AS "language.name",
     language.last_update AS "language.last_update",
     actor.actor_id AS "actor.actor_id",
     actor.first_name AS "actor.first_name",
     actor.last_name AS "actor.last_name",
     actor.last_update AS "actor.last_update",
     inventory.inventory_id AS "inventory.inventory_id",
     inventory.film_id AS "inventory.film_id",
     inventory.store_id AS "inventory.store_id",
     inventory.last_update AS "inventory.last_update",
     rental.rental_id AS "rental.rental_id",
     rental.rental_date AS "rental.rental_date",
     rental.inventory_id AS "rental.inventory_id",
     rental.customer_id AS "rental.customer_id",
     rental.return_date AS "rental.return_date",
     rental.staff_id AS "rental.staff_id",
     rental.last_update AS "rental.last_update"
FROM dvds.film_actor
     INNER JOIN dvds.actor ON (film_actor.actor_id = actor.actor_id)
     INNER JOIN dvds.film ON (film_actor.film_id = film.film_id)
     INNER JOIN dvds.language ON (film.language_id = language.language_id)
     INNER JOIN dvds.inventory ON (inventory.film_id = film.film_id)
     INNER JOIN dvds.rental ON (rental.inventory_id = inventory.inventory_id)
ORDER BY film.film_id ASC
LIMIT 1000;
`,
	}})
	gotestparrot.R.Load("TestJoinViewWithTable", []gotestparrot.Recording{{
		Key: 0,
		Value: `
SELECT customer_list.id AS "customer_list.id",
     customer_list.name AS "customer_list.name",
     customer_list.address AS "customer_list.address",
     customer_list."zip code" AS "customer_list.zip code",
     customer_list.phone AS "customer_list.phone",
     customer_list.city AS "customer_list.city",
     customer_list.country AS "customer_list.country",
     customer_list.notes AS "customer_list.notes",
     customer_list.sid AS "customer_list.sid",
     rental.rental_id AS "rental.rental_id",
     rental.rental_date AS "rental.rental_date",
     rental.inventory_id AS "rental.inventory_id",
     rental.customer_id AS "rental.customer_id",
     rental.return_date AS "rental.return_date",
     rental.staff_id AS "rental.staff_id",
     rental.last_update AS "rental.last_update"
FROM dvds.customer_list
     INNER JOIN dvds.rental ON (customer_list.id = rental.customer_id)
WHERE customer_list.id <= 2
ORDER BY customer_list.id;
`,
	}, {
		Key:   1,
		Value: 2,
	}, {
		Key:   2,
		Value: 32,
	}, {
		Key:   3,
		Value: 27,
	}})
	gotestparrot.R.Load("TestQuickStart", []gotestparrot.Recording{{
		Key: 0,
		Value: `
SELECT actor.actor_id AS "actor.actor_id",
     actor.first_name AS "actor.first_name",
     actor.last_name AS "actor.last_name",
     actor.last_update AS "actor.last_update",
     film.film_id AS "film.film_id",
     film.title AS "film.title",
     film.description AS "film.description",
     film.release_year AS "film.release_year",
     film.language_id AS "film.language_id",
     film.rental_duration AS "film.rental_duration",
     film.rental_rate AS "film.rental_rate",
     film.length AS "film.length",
     film.replacement_cost AS "film.replacement_cost",
     film.rating AS "film.rating",
     film.last_update AS "film.last_update",
     film.special_features AS "film.special_features",
     film.fulltext AS "film.fulltext",
     language.language_id AS "language.language_id",
     language.name AS "language.name",
     language.last_update AS "language.last_update",
     category.category_id AS "category.category_id",
     category.name AS "category.name",
     category.last_update AS "category.last_update"
FROM dvds.actor
     INNER JOIN dvds.film_actor ON (actor.actor_id = film_actor.actor_id)
     INNER JOIN dvds.film ON (film.film_id = film_actor.film_id)
     INNER JOIN dvds.language ON (language.language_id = film.language_id)
     INNER JOIN dvds.film_category ON (film_category.film_id = film.film_id)
     INNER JOIN dvds.category ON (category.category_id = film_category.category_id)
WHERE ((language.name = 'English') AND (category.name != 'Action')) AND (film.length > 180)
ORDER BY actor.actor_id ASC, film.film_id ASC;
`,
	}, {
		Key: 1,
		Value: []struct {
			model.Actor
			Films []struct {
				model.Film
				Language   model.Language
				Categories []model.Category
			}
		}{{
			Actor: model.Actor{
				ActorID:    int32(1),
				FirstName:  "Penelope",
				LastName:   "Guiness",
				LastUpdate: gotestparrot.Decode("2013-05-26T14:47:57.62Z", time.Time{}).(time.Time),
			},
			Films: []struct {
				model.Film
				Language   model.Language
				Categories []model.Category
			}{{
				Categories: []model.Category{{
					CategoryID: int32(8),
					LastUpdate: gotestparrot.Decode("2006-02-15T09:46:27Z", time.Time{}).(time.Time),
					Name:       "Family",
				}},
				Film: model.Film{
					Description:     gotestparrot.Ptr("A Action-Packed Tale of a Boy And a Lumberjack who must Chase a Madman in A Baloon").(*string),
					FilmID:          int32(499),
					Fulltext:        "'action':5 'action-pack':4 'baloon':21 'boy':10 'chase':16 'evolut':2 'king':1 'lumberjack':13 'madman':18 'must':15 'pack':6 'tale':7",
					LanguageID:      int16(1),
					LastUpdate:      gotestparrot.Decode("2013-05-26T14:50:58.951Z", time.Time{}).(time.Time),
					Length:          gotestparrot.Ptr(int16(184)).(*int16),
					Rating:          gotestparrot.Ptr(model.MpaaRating("NC-17")).(*model.MpaaRating),
					ReleaseYear:     gotestparrot.Ptr(int32(2006)).(*int32),
					RentalDuration:  int16(3),
					RentalRate:      4.99,
					ReplacementCost: 24.99,
					SpecialFeatures: gotestparrot.Ptr("{Trailers,\"Deleted Scenes\",\"Behind the Scenes\"}").(*string),
					Title:           "King Evolution",
				},
				Language: model.Language{
					LanguageID: int32(1),
					LastUpdate: gotestparrot.Decode("2006-02-15T10:02:19Z", time.Time{}).(time.Time),
					Name:       "English             ",
				},
			}},
		}, {
			Actor: model.Actor{
				ActorID:    int32(3),
				FirstName:  "Ed",
				LastName:   "Chase",
				LastUpdate: gotestparrot.Decode("2013-05-26T14:47:57.62Z", time.Time{}).(time.Time),
			},
			Films: []struct {
				model.Film
				Language   model.Language
				Categories []model.Category
			}{{
				Categories: []model.Category{{
					CategoryID: int32(6),
					LastUpdate: gotestparrot.Decode("2006-02-15T09:46:27Z", time.Time{}).(time.Time),
					Name:       "Documentary",
				}},
				Film: model.Film{
					Description:     gotestparrot.Ptr("A Unbelieveable Yarn of a Boat And a Database Administrator who must Meet a Boy in The First Manned Space Station").(*string),
					FilmID:          int32(996),
					Fulltext:        "'administr':12 'boat':8 'boy':17 'databas':11 'first':20 'languag':2 'man':21 'meet':15 'must':14 'space':22 'station':23 'unbeliev':4 'yarn':5 'young':1",
					LanguageID:      int16(1),
					LastUpdate:      gotestparrot.Decode("2013-05-26T14:50:58.951Z", time.Time{}).(time.Time),
					Length:          gotestparrot.Ptr(int16(183)).(*int16),
					Rating:          gotestparrot.Ptr(model.MpaaRating("G")).(*model.MpaaRating),
					ReleaseYear:     gotestparrot.Ptr(int32(2006)).(*int32),
					RentalDuration:  int16(6),
					RentalRate:      0.99,
					ReplacementCost: 9.99,
					SpecialFeatures: gotestparrot.Ptr("{Trailers,\"Behind the Scenes\"}").(*string),
					Title:           "Young Language",
				},
				Language: model.Language{
					LanguageID: int32(1),
					LastUpdate: gotestparrot.Decode("2006-02-15T10:02:19Z", time.Time{}).(time.Time),
					Name:       "English             ",
				},
			}},
		}},
	}, {
		Key: 2,
		Value: []struct {
			model.Category
			Films  []model.Film
			Actors []model.Actor
		}{{
			Actors: []model.Actor{{
				ActorID:    int32(1),
				FirstName:  "Penelope",
				LastName:   "Guiness",
				LastUpdate: gotestparrot.Decode("2013-05-26T14:47:57.62Z", time.Time{}).(time.Time),
			}, {
				ActorID:    int32(20),
				FirstName:  "Lucille",
				LastName:   "Tracy",
				LastUpdate: gotestparrot.Decode("2013-05-26T14:47:57.62Z", time.Time{}).(time.Time),
			}, {
				ActorID:    int32(36),
				FirstName:  "Burt",
				LastName:   "Dukakis",
				LastUpdate: gotestparrot.Decode("2013-05-26T14:47:57.62Z", time.Time{}).(time.Time),
			}, {
				ActorID:    int32(70),
				FirstName:  "Michelle",
				LastName:   "Mcconaughey",
				LastUpdate: gotestparrot.Decode("2013-05-26T14:47:57.62Z", time.Time{}).(time.Time),
			}, {
				ActorID:    int32(118),
				FirstName:  "Cuba",
				LastName:   "Allen",
				LastUpdate: gotestparrot.Decode("2013-05-26T14:47:57.62Z", time.Time{}).(time.Time),
			}, {
				ActorID:    int32(187),
				FirstName:  "Renee",
				LastName:   "Ball",
				LastUpdate: gotestparrot.Decode("2013-05-26T14:47:57.62Z", time.Time{}).(time.Time),
			}, {
				ActorID:    int32(198),
				FirstName:  "Mary",
				LastName:   "Keitel",
				LastUpdate: gotestparrot.Decode("2013-05-26T14:47:57.62Z", time.Time{}).(time.Time),
			}},
			Category: model.Category{
				CategoryID: int32(8),
				LastUpdate: gotestparrot.Decode("2006-02-15T09:46:27Z", time.Time{}).(time.Time),
				Name:       "Family",
			},
			Films: []model.Film{{
				Description:     gotestparrot.Ptr("A Action-Packed Tale of a Boy And a Lumberjack who must Chase a Madman in A Baloon").(*string),
				FilmID:          int32(499),
				Fulltext:        "'action':5 'action-pack':4 'baloon':21 'boy':10 'chase':16 'evolut':2 'king':1 'lumberjack':13 'madman':18 'must':15 'pack':6 'tale':7",
				LanguageID:      int16(1),
				LastUpdate:      gotestparrot.Decode("2013-05-26T14:50:58.951Z", time.Time{}).(time.Time),
				Length:          gotestparrot.Ptr(int16(184)).(*int16),
				Rating:          gotestparrot.Ptr(model.MpaaRating("NC-17")).(*model.MpaaRating),
				ReleaseYear:     gotestparrot.Ptr(int32(2006)).(*int32),
				RentalDuration:  int16(3),
				RentalRate:      4.99,
				ReplacementCost: 24.99,
				SpecialFeatures: gotestparrot.Ptr("{Trailers,\"Deleted Scenes\",\"Behind the Scenes\"}").(*string),
				Title:           "King Evolution",
			}, {
				Description:     gotestparrot.Ptr("A Stunning Drama of a Forensic Psychologist And a Husband who must Overcome a Waitress in A Monastery").(*string),
				FilmID:          int32(50),
				Fulltext:        "'bake':1 'cleopatra':2 'drama':5 'forens':8 'husband':12 'monasteri':20 'must':14 'overcom':15 'psychologist':9 'stun':4 'waitress':17",
				LanguageID:      int16(1),
				LastUpdate:      gotestparrot.Decode("2013-05-26T14:50:58.951Z", time.Time{}).(time.Time),
				Length:          gotestparrot.Ptr(int16(182)).(*int16),
				Rating:          gotestparrot.Ptr(model.MpaaRating("G")).(*model.MpaaRating),
				ReleaseYear:     gotestparrot.Ptr(int32(2006)).(*int32),
				RentalDuration:  int16(3),
				RentalRate:      2.99,
				ReplacementCost: 20.99,
				SpecialFeatures: gotestparrot.Ptr("{Commentaries,\"Behind the Scenes\"}").(*string),
				Title:           "Baked Cleopatra",
			}},
		}, {
			Actors: []model.Actor{{
				ActorID:    int32(3),
				FirstName:  "Ed",
				LastName:   "Chase",
				LastUpdate: gotestparrot.Decode("2013-05-26T14:47:57.62Z", time.Time{}).(time.Time),
			}, {
				ActorID:    int32(27),
				FirstName:  "Julia",
				LastName:   "Mcqueen",
				LastUpdate: gotestparrot.Decode("2013-05-26T14:47:57.62Z", time.Time{}).(time.Time),
			}, {
				ActorID:    int32(28),
				FirstName:  "Woody",
				LastName:   "Hoffman",
				LastUpdate: gotestparrot.Decode("2013-05-26T14:47:57.62Z", time.Time{}).(time.Time),
			}, {
				ActorID:    int32(47),
				FirstName:  "Julia",
				LastName:   "Barrymore",
				LastUpdate: gotestparrot.Decode("2013-05-26T14:47:57.62Z", time.Time{}).(time.Time),
			}, {
				ActorID:    int32(84),
				FirstName:  "James",
				LastName:   "Pitt",
				LastUpdate: gotestparrot.Decode("2013-05-26T14:47:57.62Z", time.Time{}).(time.Time),
			}, {
				ActorID:    int32(107),
				FirstName:  "Gina",
				LastName:   "Degeneres",
				LastUpdate: gotestparrot.Decode("2013-05-26T14:47:57.62Z", time.Time{}).(time.Time),
			}, {
				ActorID:    int32(111),
				FirstName:  "Cameron",
				LastName:   "Zellweger",
				LastUpdate: gotestparrot.Decode("2013-05-26T14:47:57.62Z", time.Time{}).(time.Time),
			}, {
				ActorID:    int32(157),
				FirstName:  "Greta",
				LastName:   "Malden",
				LastUpdate: gotestparrot.Decode("2013-05-26T14:47:57.62Z", time.Time{}).(time.Time),
			}, {
				ActorID:    int32(163),
				FirstName:  "Christopher",
				LastName:   "West",
				LastUpdate: gotestparrot.Decode("2013-05-26T14:47:57.62Z", time.Time{}).(time.Time),
			}, {
				ActorID:    int32(170),
				FirstName:  "Mena",
				LastName:   "Hopper",
				LastUpdate: gotestparrot.Decode("2013-05-26T14:47:57.62Z", time.Time{}).(time.Time),
			}, {
				ActorID:    int32(185),
				FirstName:  "Michael",
				LastName:   "Bolger",
				LastUpdate: gotestparrot.Decode("2013-05-26T14:47:57.62Z", time.Time{}).(time.Time),
			}},
			Category: model.Category{
				CategoryID: int32(6),
				LastUpdate: gotestparrot.Decode("2006-02-15T09:46:27Z", time.Time{}).(time.Time),
				Name:       "Documentary",
			},
			Films: []model.Film{{
				Description:     gotestparrot.Ptr("A Unbelieveable Yarn of a Boat And a Database Administrator who must Meet a Boy in The First Manned Space Station").(*string),
				FilmID:          int32(996),
				Fulltext:        "'administr':12 'boat':8 'boy':17 'databas':11 'first':20 'languag':2 'man':21 'meet':15 'must':14 'space':22 'station':23 'unbeliev':4 'yarn':5 'young':1",
				LanguageID:      int16(1),
				LastUpdate:      gotestparrot.Decode("2013-05-26T14:50:58.951Z", time.Time{}).(time.Time),
				Length:          gotestparrot.Ptr(int16(183)).(*int16),
				Rating:          gotestparrot.Ptr(model.MpaaRating("G")).(*model.MpaaRating),
				ReleaseYear:     gotestparrot.Ptr(int32(2006)).(*int32),
				RentalDuration:  int16(6),
				RentalRate:      0.99,
				ReplacementCost: 9.99,
				SpecialFeatures: gotestparrot.Ptr("{Trailers,\"Behind the Scenes\"}").(*string),
				Title:           "Young Language",
			}, {
				Description:     gotestparrot.Ptr("A Awe-Inspiring Epistle of a Teacher And a Feminist who must Confront a Pioneer in Ancient Japan").(*string),
				FilmID:          int32(973),
				Fulltext:        "'ancient':20 'awe':5 'awe-inspir':4 'confront':16 'epistl':7 'feminist':13 'inspir':6 'japan':21 'must':15 'pioneer':18 'teacher':10 'turn':2 'wife':1",
				LanguageID:      int16(1),
				LastUpdate:      gotestparrot.Decode("2013-05-26T14:50:58.951Z", time.Time{}).(time.Time),
				Length:          gotestparrot.Ptr(int16(183)).(*int16),
				Rating:          gotestparrot.Ptr(model.MpaaRating("NC-17")).(*model.MpaaRating),
				ReleaseYear:     gotestparrot.Ptr(int32(2006)).(*int32),
				RentalDuration:  int16(3),
				RentalRate:      4.99,
				ReplacementCost: 27.99,
				SpecialFeatures: gotestparrot.Ptr("{\"Deleted Scenes\",\"Behind the Scenes\"}").(*string),
				Title:           "Wife Turn",
			}},
		}},
	}})
	gotestparrot.R.Load("TestQuickStartWithSubQueries", []gotestparrot.Recording{{
		Key: 0,
		Value: []struct {
			model.Actor
			Films []struct {
				model.Film
				Language   model.Language
				Categories []model.Category
			}
		}{{
			Actor: model.Actor{
				ActorID:    int32(1),
				FirstName:  "Penelope",
				LastName:   "Guiness",
				LastUpdate: gotestparrot.Decode("2013-05-26T14:47:57.62Z", time.Time{}).(time.Time),
			},
			Films: []struct {
				model.Film
				Language   model.Language
				Categories []model.Category
			}{{
				Categories: []model.Category{{
					CategoryID: int32(8),
					LastUpdate: gotestparrot.Decode("2006-02-15T09:46:27Z", time.Time{}).(time.Time),
					Name:       "Family",
				}},
				Film: model.Film{
					Description:     gotestparrot.Ptr("A Action-Packed Tale of a Boy And a Lumberjack who must Chase a Madman in A Baloon").(*string),
					FilmID:          int32(499),
					Fulltext:        "'action':5 'action-pack':4 'baloon':21 'boy':10 'chase':16 'evolut':2 'king':1 'lumberjack':13 'madman':18 'must':15 'pack':6 'tale':7",
					LanguageID:      int16(1),
					LastUpdate:      gotestparrot.Decode("2013-05-26T14:50:58.951Z", time.Time{}).(time.Time),
					Length:          gotestparrot.Ptr(int16(184)).(*int16),
					Rating:          gotestparrot.Ptr(model.MpaaRating("NC-17")).(*model.MpaaRating),
					ReleaseYear:     gotestparrot.Ptr(int32(2006)).(*int32),
					RentalDuration:  int16(3),
					RentalRate:      4.99,
					ReplacementCost: 24.99,
					SpecialFeatures: gotestparrot.Ptr("{Trailers,\"Deleted Scenes\",\"Behind the Scenes\"}").(*string),
					Title:           "King Evolution",
				},
				Language: model.Language{
					LanguageID: int32(1),
					LastUpdate: gotestparrot.Decode("2006-02-15T10:02:19Z", time.Time{}).(time.Time),
					Name:       "English             ",
				},
			}},
		}, {
			Actor: model.Actor{
				ActorID:    int32(3),
				FirstName:  "Ed",
				LastName:   "Chase",
				LastUpdate: gotestparrot.Decode("2013-05-26T14:47:57.62Z", time.Time{}).(time.Time),
			},
			Films: []struct {
				model.Film
				Language   model.Language
				Categories []model.Category
			}{{
				Categories: []model.Category{{
					CategoryID: int32(6),
					LastUpdate: gotestparrot.Decode("2006-02-15T09:46:27Z", time.Time{}).(time.Time),
					Name:       "Documentary",
				}},
				Film: model.Film{
					Description:     gotestparrot.Ptr("A Unbelieveable Yarn of a Boat And a Database Administrator who must Meet a Boy in The First Manned Space Station").(*string),
					FilmID:          int32(996),
					Fulltext:        "'administr':12 'boat':8 'boy':17 'databas':11 'first':20 'languag':2 'man':21 'meet':15 'must':14 'space':22 'station':23 'unbeliev':4 'yarn':5 'young':1",
					LanguageID:      int16(1),
					LastUpdate:      gotestparrot.Decode("2013-05-26T14:50:58.951Z", time.Time{}).(time.Time),
					Length:          gotestparrot.Ptr(int16(183)).(*int16),
					Rating:          gotestparrot.Ptr(model.MpaaRating("G")).(*model.MpaaRating),
					ReleaseYear:     gotestparrot.Ptr(int32(2006)).(*int32),
					RentalDuration:  int16(6),
					RentalRate:      0.99,
					ReplacementCost: 9.99,
					SpecialFeatures: gotestparrot.Ptr("{Trailers,\"Behind the Scenes\"}").(*string),
					Title:           "Young Language",
				},
				Language: model.Language{
					LanguageID: int32(1),
					LastUpdate: gotestparrot.Decode("2006-02-15T10:02:19Z", time.Time{}).(time.Time),
					Name:       "English             ",
				},
			}},
		}},
	}, {
		Key: 1,
		Value: []struct {
			model.Category
			Films  []model.Film
			Actors []model.Actor
		}{{
			Actors: []model.Actor{{
				ActorID:    int32(1),
				FirstName:  "Penelope",
				LastName:   "Guiness",
				LastUpdate: gotestparrot.Decode("2013-05-26T14:47:57.62Z", time.Time{}).(time.Time),
			}, {
				ActorID:    int32(20),
				FirstName:  "Lucille",
				LastName:   "Tracy",
				LastUpdate: gotestparrot.Decode("2013-05-26T14:47:57.62Z", time.Time{}).(time.Time),
			}, {
				ActorID:    int32(36),
				FirstName:  "Burt",
				LastName:   "Dukakis",
				LastUpdate: gotestparrot.Decode("2013-05-26T14:47:57.62Z", time.Time{}).(time.Time),
			}, {
				ActorID:    int32(70),
				FirstName:  "Michelle",
				LastName:   "Mcconaughey",
				LastUpdate: gotestparrot.Decode("2013-05-26T14:47:57.62Z", time.Time{}).(time.Time),
			}, {
				ActorID:    int32(118),
				FirstName:  "Cuba",
				LastName:   "Allen",
				LastUpdate: gotestparrot.Decode("2013-05-26T14:47:57.62Z", time.Time{}).(time.Time),
			}, {
				ActorID:    int32(187),
				FirstName:  "Renee",
				LastName:   "Ball",
				LastUpdate: gotestparrot.Decode("2013-05-26T14:47:57.62Z", time.Time{}).(time.Time),
			}, {
				ActorID:    int32(198),
				FirstName:  "Mary",
				LastName:   "Keitel",
				LastUpdate: gotestparrot.Decode("2013-05-26T14:47:57.62Z", time.Time{}).(time.Time),
			}},
			Category: model.Category{
				CategoryID: int32(8),
				LastUpdate: gotestparrot.Decode("2006-02-15T09:46:27Z", time.Time{}).(time.Time),
				Name:       "Family",
			},
			Films: []model.Film{{
				Description:     gotestparrot.Ptr("A Action-Packed Tale of a Boy And a Lumberjack who must Chase a Madman in A Baloon").(*string),
				FilmID:          int32(499),
				Fulltext:        "'action':5 'action-pack':4 'baloon':21 'boy':10 'chase':16 'evolut':2 'king':1 'lumberjack':13 'madman':18 'must':15 'pack':6 'tale':7",
				LanguageID:      int16(1),
				LastUpdate:      gotestparrot.Decode("2013-05-26T14:50:58.951Z", time.Time{}).(time.Time),
				Length:          gotestparrot.Ptr(int16(184)).(*int16),
				Rating:          gotestparrot.Ptr(model.MpaaRating("NC-17")).(*model.MpaaRating),
				ReleaseYear:     gotestparrot.Ptr(int32(2006)).(*int32),
				RentalDuration:  int16(3),
				RentalRate:      4.99,
				ReplacementCost: 24.99,
				SpecialFeatures: gotestparrot.Ptr("{Trailers,\"Deleted Scenes\",\"Behind the Scenes\"}").(*string),
				Title:           "King Evolution",
			}, {
				Description:     gotestparrot.Ptr("A Stunning Drama of a Forensic Psychologist And a Husband who must Overcome a Waitress in A Monastery").(*string),
				FilmID:          int32(50),
				Fulltext:        "'bake':1 'cleopatra':2 'drama':5 'forens':8 'husband':12 'monasteri':20 'must':14 'overcom':15 'psychologist':9 'stun':4 'waitress':17",
				LanguageID:      int16(1),
				LastUpdate:      gotestparrot.Decode("2013-05-26T14:50:58.951Z", time.Time{}).(time.Time),
				Length:          gotestparrot.Ptr(int16(182)).(*int16),
				Rating:          gotestparrot.Ptr(model.MpaaRating("G")).(*model.MpaaRating),
				ReleaseYear:     gotestparrot.Ptr(int32(2006)).(*int32),
				RentalDuration:  int16(3),
				RentalRate:      2.99,
				ReplacementCost: 20.99,
				SpecialFeatures: gotestparrot.Ptr("{Commentaries,\"Behind the Scenes\"}").(*string),
				Title:           "Baked Cleopatra",
			}},
		}, {
			Actors: []model.Actor{{
				ActorID:    int32(3),
				FirstName:  "Ed",
				LastName:   "Chase",
				LastUpdate: gotestparrot.Decode("2013-05-26T14:47:57.62Z", time.Time{}).(time.Time),
			}, {
				ActorID:    int32(27),
				FirstName:  "Julia",
				LastName:   "Mcqueen",
				LastUpdate: gotestparrot.Decode("2013-05-26T14:47:57.62Z", time.Time{}).(time.Time),
			}, {
				ActorID:    int32(28),
				FirstName:  "Woody",
				LastName:   "Hoffman",
				LastUpdate: gotestparrot.Decode("2013-05-26T14:47:57.62Z", time.Time{}).(time.Time),
			}, {
				ActorID:    int32(47),
				FirstName:  "Julia",
				LastName:   "Barrymore",
				LastUpdate: gotestparrot.Decode("2013-05-26T14:47:57.62Z", time.Time{}).(time.Time),
			}, {
				ActorID:    int32(84),
				FirstName:  "James",
				LastName:   "Pitt",
				LastUpdate: gotestparrot.Decode("2013-05-26T14:47:57.62Z", time.Time{}).(time.Time),
			}, {
				ActorID:    int32(107),
				FirstName:  "Gina",
				LastName:   "Degeneres",
				LastUpdate: gotestparrot.Decode("2013-05-26T14:47:57.62Z", time.Time{}).(time.Time),
			}, {
				ActorID:    int32(111),
				FirstName:  "Cameron",
				LastName:   "Zellweger",
				LastUpdate: gotestparrot.Decode("2013-05-26T14:47:57.62Z", time.Time{}).(time.Time),
			}, {
				ActorID:    int32(157),
				FirstName:  "Greta",
				LastName:   "Malden",
				LastUpdate: gotestparrot.Decode("2013-05-26T14:47:57.62Z", time.Time{}).(time.Time),
			}, {
				ActorID:    int32(163),
				FirstName:  "Christopher",
				LastName:   "West",
				LastUpdate: gotestparrot.Decode("2013-05-26T14:47:57.62Z", time.Time{}).(time.Time),
			}, {
				ActorID:    int32(170),
				FirstName:  "Mena",
				LastName:   "Hopper",
				LastUpdate: gotestparrot.Decode("2013-05-26T14:47:57.62Z", time.Time{}).(time.Time),
			}, {
				ActorID:    int32(185),
				FirstName:  "Michael",
				LastName:   "Bolger",
				LastUpdate: gotestparrot.Decode("2013-05-26T14:47:57.62Z", time.Time{}).(time.Time),
			}},
			Category: model.Category{
				CategoryID: int32(6),
				LastUpdate: gotestparrot.Decode("2006-02-15T09:46:27Z", time.Time{}).(time.Time),
				Name:       "Documentary",
			},
			Films: []model.Film{{
				Description:     gotestparrot.Ptr("A Unbelieveable Yarn of a Boat And a Database Administrator who must Meet a Boy in The First Manned Space Station").(*string),
				FilmID:          int32(996),
				Fulltext:        "'administr':12 'boat':8 'boy':17 'databas':11 'first':20 'languag':2 'man':21 'meet':15 'must':14 'space':22 'station':23 'unbeliev':4 'yarn':5 'young':1",
				LanguageID:      int16(1),
				LastUpdate:      gotestparrot.Decode("2013-05-26T14:50:58.951Z", time.Time{}).(time.Time),
				Length:          gotestparrot.Ptr(int16(183)).(*int16),
				Rating:          gotestparrot.Ptr(model.MpaaRating("G")).(*model.MpaaRating),
				ReleaseYear:     gotestparrot.Ptr(int32(2006)).(*int32),
				RentalDuration:  int16(6),
				RentalRate:      0.99,
				ReplacementCost: 9.99,
				SpecialFeatures: gotestparrot.Ptr("{Trailers,\"Behind the Scenes\"}").(*string),
				Title:           "Young Language",
			}, {
				Description:     gotestparrot.Ptr("A Awe-Inspiring Epistle of a Teacher And a Feminist who must Confront a Pioneer in Ancient Japan").(*string),
				FilmID:          int32(973),
				Fulltext:        "'ancient':20 'awe':5 'awe-inspir':4 'confront':16 'epistl':7 'feminist':13 'inspir':6 'japan':21 'must':15 'pioneer':18 'teacher':10 'turn':2 'wife':1",
				LanguageID:      int16(1),
				LastUpdate:      gotestparrot.Decode("2013-05-26T14:50:58.951Z", time.Time{}).(time.Time),
				Length:          gotestparrot.Ptr(int16(183)).(*int16),
				Rating:          gotestparrot.Ptr(model.MpaaRating("NC-17")).(*model.MpaaRating),
				ReleaseYear:     gotestparrot.Ptr(int32(2006)).(*int32),
				RentalDuration:  int16(3),
				RentalRate:      4.99,
				ReplacementCost: 27.99,
				SpecialFeatures: gotestparrot.Ptr("{\"Deleted Scenes\",\"Behind the Scenes\"}").(*string),
				Title:           "Wife Turn",
			}},
		}},
	}})
	gotestparrot.R.Load("TestRowLock", []gotestparrot.Recording{{
		Key: 0,
		Value: `
SELECT *
FROM dvds.address
LIMIT 3
FOR UPDATE;
`,
	}, {
		Key: 1,
		Value: `
SELECT *
FROM dvds.address
LIMIT 3
FOR NO KEY UPDATE;
`,
	}, {
		Key: 2,
		Value: `
SELECT *
FROM dvds.address
LIMIT 3
FOR SHARE;
`,
	}, {
		Key: 3,
		Value: `
SELECT *
FROM dvds.address
LIMIT 3
FOR KEY SHARE;
`,
	}, {
		Key: 4,
		Value: `
SELECT *
FROM dvds.address
LIMIT 3
FOR UPDATE NOWAIT;
`,
	}, {
		Key: 5,
		Value: `
SELECT *
FROM dvds.address
LIMIT 3
FOR NO KEY UPDATE NOWAIT;
`,
	}, {
		Key: 6,
		Value: `
SELECT *
FROM dvds.address
LIMIT 3
FOR SHARE NOWAIT;
`,
	}, {
		Key: 7,
		Value: `
SELECT *
FROM dvds.address
LIMIT 3
FOR KEY SHARE NOWAIT;
`,
	}, {
		Key: 8,
		Value: `
SELECT *
FROM dvds.address
LIMIT 3
FOR UPDATE SKIP LOCKED;
`,
	}, {
		Key: 9,
		Value: `
SELECT *
FROM dvds.address
LIMIT 3
FOR NO KEY UPDATE SKIP LOCKED;
`,
	}, {
		Key: 10,
		Value: `
SELECT *
FROM dvds.address
LIMIT 3
FOR SHARE SKIP LOCKED;
`,
	}, {
		Key: 11,
		Value: `
SELECT *
FROM dvds.address
LIMIT 3
FOR KEY SHARE SKIP LOCKED;
`,
	}})
	gotestparrot.R.Load("TestSelectAliasColumn", []gotestparrot.Recording{{
		Key: 0,
		Value: `
SELECT f1.title AS "title1",
     f2.title AS "title2",
     f1.length AS "length"
FROM dvds.film AS f1
     INNER JOIN dvds.film AS f2 ON ((f1.film_id != f2.film_id) AND (f1.length = f2.length))
ORDER BY f1.length ASC, f1.title ASC, f2.title ASC
LIMIT 1000;
`,
	}, {
		Key: 1,
		Value: struct {
			Title1 string
			Title2 string
			Length int16
		}{
			Length: int16(46),
			Title1: "Alien Center",
			Title2: "Iron Moon",
		},
	}})
	gotestparrot.R.Load("TestSelectAndUnionInProjection", []gotestparrot.Recording{{
		Key: 0,
		Value: `
SELECT payment.payment_id AS "payment.payment_id",
     (
          SELECT customer.customer_id AS "customer.customer_id"
          FROM dvds.customer
          LIMIT 1
     ),
     (
          (
               SELECT payment.payment_id AS "payment.payment_id"
               FROM dvds.payment
               LIMIT 1
               OFFSET 10
          )
          UNION
          (
               SELECT payment.payment_id AS "payment.payment_id"
               FROM dvds.payment
               LIMIT 1
               OFFSET 2
          )
          LIMIT 1
     )
FROM dvds.payment
LIMIT 12;
`,
	}})
	gotestparrot.R.Load("TestSelectFullCrossJoin", []gotestparrot.Recording{{
		Key: 0,
		Value: `
SELECT customer.customer_id AS "customer.customer_id",
     customer.store_id AS "customer.store_id",
     customer.first_name AS "customer.first_name",
     customer.last_name AS "customer.last_name",
     customer.email AS "customer.email",
     customer.address_id AS "customer.address_id",
     customer.activebool AS "customer.activebool",
     customer.create_date AS "customer.create_date",
     customer.last_update AS "customer.last_update",
     customer.active AS "customer.active",
     address.address_id AS "address.address_id",
     address.address AS "address.address",
     address.address2 AS "address.address2",
     address.district AS "address.district",
     address.city_id AS "address.city_id",
     address.postal_code AS "address.postal_code",
     address.phone AS "address.phone",
     address.last_update AS "address.last_update"
FROM dvds.customer
     CROSS JOIN dvds.address
ORDER BY customer.customer_id ASC
LIMIT 1000;
`,
	}, {
		Key: 1,
		Value: struct {
			model.Customer
			model.Address
		}{
			Address: model.Address{
				Address:    "954 Lapu-Lapu Way",
				Address2:   gotestparrot.Ptr("").(*string),
				AddressID:  int32(398),
				CityID:     int16(278),
				District:   "Moskova",
				LastUpdate: gotestparrot.Decode("2006-02-15T09:45:30Z", time.Time{}).(time.Time),
				Phone:      "737229003916",
				PostalCode: gotestparrot.Ptr("8816").(*string),
			},
			Customer: model.Customer{
				Active:     gotestparrot.Ptr(int32(1)).(*int32),
				Activebool: true,
				AddressID:  int16(6),
				CreateDate: gotestparrot.Decode("2006-02-14T00:00:00Z", time.Time{}).(time.Time),
				CustomerID: int32(2),
				Email:      gotestparrot.Ptr("patricia.johnson@sakilacustomer.org").(*string),
				FirstName:  "Patricia",
				LastName:   "Johnson",
				LastUpdate: gotestparrot.Decode("2013-05-26T14:49:45.738Z", &time.Time{}).(*time.Time),
				StoreID:    int16(1),
			},
		},
	}})
	gotestparrot.R.Load("TestSelectFullJoin", []gotestparrot.Recording{{
		Key: 0,
		Value: `
SELECT customer.customer_id AS "customer.customer_id",
     customer.store_id AS "customer.store_id",
     customer.first_name AS "customer.first_name",
     customer.last_name AS "customer.last_name",
     customer.email AS "customer.email",
     customer.address_id AS "customer.address_id",
     customer.activebool AS "customer.activebool",
     customer.create_date AS "customer.create_date",
     customer.last_update AS "customer.last_update",
     customer.active AS "customer.active",
     address.address_id AS "address.address_id",
     address.address AS "address.address",
     address.address2 AS "address.address2",
     address.district AS "address.district",
     address.city_id AS "address.city_id",
     address.postal_code AS "address.postal_code",
     address.phone AS "address.phone",
     address.last_update AS "address.last_update"
FROM dvds.customer
     FULL JOIN dvds.address ON (customer.address_id = address.address_id)
ORDER BY customer.customer_id ASC;
`,
	}, {
		Key: 1,
		Value: struct {
			Address  *model.Address
			Customer *model.Customer
		}{Address: &model.Address{
			Address:    "23 Workhaven Lane",
			AddressID:  int32(3),
			CityID:     int16(300),
			District:   "Alberta",
			LastUpdate: gotestparrot.Decode("2006-02-15T09:45:30Z", time.Time{}).(time.Time),
			Phone:      "14033335568",
			PostalCode: gotestparrot.Ptr("").(*string),
		}},
	}})
	gotestparrot.R.Load("TestSelectFunctions", []gotestparrot.Recording{{
		Key: 0,
		Value: `
SELECT MAX(film.rental_rate) AS "max_film_rate"
FROM dvds.film;
`,
	}, {
		Key: 1,
		Value: struct {
			MaxFilmRate float64
		}{MaxFilmRate: 4.99},
	}})
	gotestparrot.R.Load("TestSelectGroupBy2", []gotestparrot.Recording{{
		Key: 0,
		Value: `
SELECT customer.customer_id AS "customer.customer_id",
     customer.store_id AS "customer.store_id",
     customer.first_name AS "customer.first_name",
     customer.last_name AS "customer.last_name",
     customer.email AS "customer.email",
     customer.address_id AS "customer.address_id",
     customer.activebool AS "customer.activebool",
     customer.create_date AS "customer.create_date",
     customer.last_update AS "customer.last_update",
     customer.active AS "customer.active",
     customer_payment_sum.amount_sum AS "CustomerWithAmounts.AmountSum"
FROM dvds.customer
     INNER JOIN (
          SELECT payment.customer_id AS "payment.customer_id",
               SUM(payment.amount) AS "amount_sum"
          FROM dvds.payment
          GROUP BY payment.customer_id
     ) AS customer_payment_sum ON (customer.customer_id = customer_payment_sum."payment.customer_id")
ORDER BY customer_payment_sum.amount_sum ASC;
`,
	}, {
		Key:   1,
		Value: 599,
	}, {
		Key: 2,
		Value: struct {
			Customer  *model.Customer
			AmountSum float64
		}{Customer: &model.Customer{
			Active:     gotestparrot.Ptr(int32(1)).(*int32),
			Activebool: true,
			AddressID:  int16(323),
			CreateDate: gotestparrot.Decode("2006-02-14T00:00:00Z", time.Time{}).(time.Time),
			CustomerID: int32(318),
			Email:      gotestparrot.Ptr("brian.wyman@sakilacustomer.org").(*string),
			FirstName:  "Brian",
			LastName:   "Wyman",
			LastUpdate: gotestparrot.Decode("2013-05-26T14:49:45.738Z", &time.Time{}).(*time.Time),
			StoreID:    int16(1),
		}},
	}})
	gotestparrot.R.Load("TestSelectGroupByHaving", []gotestparrot.Recording{{
		Key: 0,
		Value: `
SELECT customer.customer_id AS "customer.customer_id",
     customer.store_id AS "customer.store_id",
     customer.first_name AS "customer.first_name",
     customer.last_name AS "customer.last_name",
     customer.email AS "customer.email",
     customer.address_id AS "customer.address_id",
     customer.activebool AS "customer.activebool",
     customer.create_date AS "customer.create_date",
     customer.last_update AS "customer.last_update",
     customer.active AS "customer.active",
     SUM(payment.amount) AS "amount.sum",
     AVG(payment.amount) AS "amount.avg",
     MAX(payment.payment_date) AS "amount.max_date",
     MAX(payment.amount) AS "amount.max",
     MIN(payment.payment_date) AS "amount.min_date",
     MIN(payment.amount) AS "amount.min",
     COUNT(payment.amount) AS "amount.count"
FROM dvds.payment
     INNER JOIN dvds.customer ON (customer.customer_id = payment.customer_id)
GROUP BY customer.customer_id
HAVING SUM(payment.amount) > 125.6
ORDER BY customer.customer_id, SUM(payment.amount) ASC;
`,
	}, {
		Key:   1,
		Value: 104,
	}, {
		Key: 2,
		Value: struct {
			model.Customer
			Amount struct {
				Sum   float64
				Avg   float64
				Max   float64
				Min   float64
				Count int64
			} `alias:"amount"`
		}{
			Amount: struct {
				Sum   float64
				Avg   float64
				Max   float64
				Min   float64
				Count int64
			}{
				Avg:   5.448333333333333,
				Count: int64(24),
				Max:   10.99,
				Min:   0.99,
				Sum:   130.76,
			},
			Customer: model.Customer{
				Active:     gotestparrot.Ptr(int32(1)).(*int32),
				Activebool: true,
				AddressID:  int16(7),
				CreateDate: gotestparrot.Decode("2006-02-14T00:00:00Z", time.Time{}).(time.Time),
				CustomerID: int32(3),
				Email:      gotestparrot.Ptr("linda.williams@sakilacustomer.org").(*string),
				FirstName:  "Linda",
				LastName:   "Williams",
				LastUpdate: gotestparrot.Decode("2013-05-26T14:49:45.738Z", &time.Time{}).(*time.Time),
				StoreID:    int16(1),
			},
		},
	}})
	gotestparrot.R.Load("TestSelectJoinJSON", []gotestparrot.Recording{{
		Key: 0,
		Value: `
SELECT jsonb_build_object('title'::text, film.title, 'description'::text, film.description, 'rating'::text, film.rating, 'length'::text, film.length, 'actors'::text, (
          SELECT json_agg(((actor.first_name || ' ') || actor.last_name))
          FROM dvds.actor
               LEFT JOIN dvds.film_actor ON (film_actor.actor_id = actor.actor_id)
          WHERE film.film_id = film_actor.film_id
     ), 'language'::text, (
          SELECT row_to_json(language)::jsonb - 'language_id'
          FROM dvds.language
          WHERE film.language_id = language.language_id
          LIMIT 1
     )) AS "json"
FROM dvds.film
LIMIT 2;
`,
	}, {
		Key:   1,
		Value: []JSONResult{gotestparrot.Decode("{\"title\": \"Chamber Italian\", \"actors\": [\"Alec Wayne\", \"Henry Berry\", \"Rip Winslet\", \"Gina Degeneres\", \"Adam Hopper\", \"Richard Penn\", \"Emily Dee\"], \"length\": 117, \"rating\": \"NC-17\", \"language\": {\"name\": \"English             \", \"last_update\": \"2006-02-15T10:02:19\"}, \"description\": \"A Fateful Reflection of a Moose And a Husband who must Overcome a Monkey in Nigeria\"}", JSONResult{}).(JSONResult), gotestparrot.Decode("{\"title\": \"Grosse Wonderful\", \"actors\": [\"Sean Guiness\", \"Dan Streep\", \"Cuba Allen\", \"Albert Johansson\"], \"length\": 49, \"rating\": \"R\", \"language\": {\"name\": \"English             \", \"last_update\": \"2006-02-15T10:02:19\"}, \"description\": \"A Epic Drama of a Cat And a Explorer who must Redeem a Moose in Australia\"}", JSONResult{}).(JSONResult)},
	}, {
		Key: 2,
		Value: map[string]interface{}{
			"actors":      []interface{}{"Alec Wayne", "Henry Berry", "Rip Winslet", "Gina Degeneres", "Adam Hopper", "Richard Penn", "Emily Dee"},
			"description": "A Fateful Reflection of a Moose And a Husband who must Overcome a Monkey in Nigeria",
			"language": map[string]interface{}{
				"last_update": "2006-02-15T10:02:19",
				"name":        "English             ",
			},
			"length": 117.0,
			"rating": "NC-17",
			"title":  "Chamber Italian",
		},
	}})
	gotestparrot.R.Load("TestSelectOrderByAscDesc", []gotestparrot.Recording{{
		Key: 0,
		Value: `
SELECT customer.customer_id AS "customer.customer_id",
     customer.first_name AS "customer.first_name",
     customer.last_name AS "customer.last_name"
FROM dvds.customer
ORDER BY customer.first_name ASC;
`,
	}, {
		Key: 1,
		Value: `
SELECT customer.customer_id AS "customer.customer_id",
     customer.first_name AS "customer.first_name",
     customer.last_name AS "customer.last_name"
FROM dvds.customer
ORDER BY customer.first_name DESC;
`,
	}, {
		Key: 2,
		Value: `
SELECT customer.customer_id AS "customer.customer_id",
     customer.first_name AS "customer.first_name",
     customer.last_name AS "customer.last_name"
FROM dvds.customer
ORDER BY customer.first_name ASC, customer.last_name DESC;
`,
	}, {
		Key: 3,
		Value: []model.Customer{{
			CustomerID: int32(67),
			FirstName:  "Kelly",
			LastName:   "Torres",
		}, {
			CustomerID: int32(546),
			FirstName:  "Kelly",
			LastName:   "Knott",
		}},
	}})
	gotestparrot.R.Load("TestSelectQueryScalar", []gotestparrot.Recording{{
		Key: 0,
		Value: `
SELECT film.film_id AS "film.film_id",
     film.title AS "film.title",
     film.description AS "film.description",
     film.release_year AS "film.release_year",
     film.language_id AS "film.language_id",
     film.rental_duration AS "film.rental_duration",
     film.rental_rate AS "film.rental_rate",
     film.length AS "film.length",
     film.replacement_cost AS "film.replacement_cost",
     film.rating AS "film.rating",
     film.last_update AS "film.last_update",
     film.special_features AS "film.special_features",
     film.fulltext AS "film.fulltext"
FROM dvds.film
WHERE film.rental_rate = (
          SELECT MAX(film.rental_rate)
          FROM dvds.film
     )
ORDER BY film.film_id ASC;
`,
	}, {
		Key:   1,
		Value: 336,
	}, {
		Key: 2,
		Value: model.Film{
			Description:     gotestparrot.Ptr("A Astounding Epistle of a Database Administrator And a Explorer who must Find a Car in Ancient China").(*string),
			FilmID:          int32(2),
			Fulltext:        "'ace':1 'administr':9 'ancient':19 'astound':4 'car':17 'china':20 'databas':8 'epistl':5 'explor':12 'find':15 'goldfing':2 'must':14",
			LanguageID:      int16(1),
			LastUpdate:      gotestparrot.Decode("2013-05-26T14:50:58.951Z", time.Time{}).(time.Time),
			Length:          gotestparrot.Ptr(int16(48)).(*int16),
			Rating:          gotestparrot.Ptr(model.MpaaRating("G")).(*model.MpaaRating),
			ReleaseYear:     gotestparrot.Ptr(int32(2006)).(*int32),
			RentalDuration:  int16(3),
			RentalRate:      4.99,
			ReplacementCost: 12.99,
			SpecialFeatures: gotestparrot.Ptr("{Trailers,\"Deleted Scenes\"}").(*string),
			Title:           "Ace Goldfinger",
		},
	}})
	gotestparrot.R.Load("TestSelectSelfJoin", []gotestparrot.Recording{{
		Key: 0,
		Value: `
SELECT f1.film_id AS "f1.film_id",
     f1.title AS "f1.title",
     f1.description AS "f1.description",
     f1.release_year AS "f1.release_year",
     f1.language_id AS "f1.language_id",
     f1.rental_duration AS "f1.rental_duration",
     f1.rental_rate AS "f1.rental_rate",
     f1.length AS "f1.length",
     f1.replacement_cost AS "f1.replacement_cost",
     f1.rating AS "f1.rating",
     f1.last_update AS "f1.last_update",
     f1.special_features AS "f1.special_features",
     f1.fulltext AS "f1.fulltext",
     f2.film_id AS "f2.film_id",
     f2.title AS "f2.title",
     f2.description AS "f2.description",
     f2.release_year AS "f2.release_year",
     f2.language_id AS "f2.language_id",
     f2.rental_duration AS "f2.rental_duration",
     f2.rental_rate AS "f2.rental_rate",
     f2.length AS "f2.length",
     f2.replacement_cost AS "f2.replacement_cost",
     f2.rating AS "f2.rating",
     f2.last_update AS "f2.last_update",
     f2.special_features AS "f2.special_features",
     f2.fulltext AS "f2.fulltext"
FROM dvds.film AS f1
     INNER JOIN dvds.film AS f2 ON ((f1.film_id < f2.film_id) AND (f1.length = f2.length))
ORDER BY f1.film_id ASC;
`,
	}, {
		Key: 1,
		Value: struct {
			F1 model.Film `alias:"f1.*"`
			F2 model.Film `alias:"f2.*"`
		}{
			F1: model.Film{
				Description:     gotestparrot.Ptr("A Unbelieveable Documentary of a Teacher And a Monkey who must Defeat a Explorer in A U-Boat").(*string),
				FilmID:          int32(983),
				Fulltext:        "'boat':21 'dare':2 'defeat':14 'documentari':5 'explor':16 'monkey':11 'must':13 'teacher':8 'u':20 'u-boat':19 'unbeliev':4 'won':1",
				LanguageID:      int16(1),
				LastUpdate:      gotestparrot.Decode("2013-05-26T14:50:58.951Z", time.Time{}).(time.Time),
				Length:          gotestparrot.Ptr(int16(105)).(*int16),
				Rating:          gotestparrot.Ptr(model.MpaaRating("PG")).(*model.MpaaRating),
				ReleaseYear:     gotestparrot.Ptr(int32(2006)).(*int32),
				RentalDuration:  int16(7),
				RentalRate:      2.99,
				ReplacementCost: 18.99,
				SpecialFeatures: gotestparrot.Ptr("{\"Behind the Scenes\"}").(*string),
				Title:           "Won Dares",
			},
			F2: model.Film{
				Description:     gotestparrot.Ptr("A Fateful Yarn of a Composer And a Man who must Face a Boy in The Canadian Rockies").(*string),
				FilmID:          int32(998),
				Fulltext:        "'boy':16 'canadian':19 'compos':8 'core':2 'face':14 'fate':4 'man':11 'must':13 'rocki':20 'yarn':5 'zhivago':1",
				LanguageID:      int16(1),
				LastUpdate:      gotestparrot.Decode("2013-05-26T14:50:58.951Z", time.Time{}).(time.Time),
				Length:          gotestparrot.Ptr(int16(105)).(*int16),
				Rating:          gotestparrot.Ptr(model.MpaaRating("NC-17")).(*model.MpaaRating),
				ReleaseYear:     gotestparrot.Ptr(int32(2006)).(*int32),
				RentalDuration:  int16(6),
				RentalRate:      0.99,
				ReplacementCost: 10.99,
				SpecialFeatures: gotestparrot.Ptr("{\"Deleted Scenes\"}").(*string),
				Title:           "Zhivago Core",
			},
		},
	}})
	gotestparrot.R.Load("TestSelectStaff", []gotestparrot.Recording{{
		Key: 0,
		Value: `
SELECT staff.staff_id AS "staff.staff_id",
     staff.first_name AS "staff.first_name",
     staff.last_name AS "staff.last_name",
     staff.address_id AS "staff.address_id",
     staff.email AS "staff.email",
     staff.store_id AS "staff.store_id",
     staff.active AS "staff.active",
     staff.username AS "staff.username",
     staff.password AS "staff.password",
     staff.last_update AS "staff.last_update",
     staff.picture AS "staff.picture"
FROM dvds.staff;
`,
	}, {
		Key: 1,
		Value: []model.Staff{{
			Active:     true,
			AddressID:  int16(3),
			Email:      gotestparrot.Ptr("Mike.Hillyer@sakilastaff.com").(*string),
			FirstName:  "Mike",
			LastName:   "Hillyer",
			LastUpdate: gotestparrot.Decode("2006-05-16T16:13:11.79328Z", time.Time{}).(time.Time),
			Password:   gotestparrot.Ptr("8cb2237d0679ca88db6464eac60da96345513964").(*string),
			Picture:    gotestparrot.Ptr([]uint8{uint8(0x89), uint8(0x50), uint8(0x4e), uint8(0x47), uint8(0xd), uint8(0xa), uint8(0x5a), uint8(0xa)}).(*[]uint8),
			StaffID:    int32(1),
			StoreID:    int16(1),
			Username:   "Mike",
		}, {
			Active:     true,
			AddressID:  int16(4),
			Email:      gotestparrot.Ptr("Jon.Stephens@sakilastaff.com").(*string),
			FirstName:  "Jon",
			LastName:   "Stephens",
			LastUpdate: gotestparrot.Decode("2006-05-16T16:13:11.79328Z", time.Time{}).(time.Time),
			Password:   gotestparrot.Ptr("8cb2237d0679ca88db6464eac60da96345513964").(*string),
			StaffID:    int32(2),
			StoreID:    int16(2),
			Username:   "Jon",
		}},
	}})
	gotestparrot.R.Load("TestSelectTimeColumns", []gotestparrot.Recording{{
		Key: 0,
		Value: `
SELECT payment.payment_id AS "payment.payment_id",
     payment.customer_id AS "payment.customer_id",
     payment.staff_id AS "payment.staff_id",
     payment.rental_id AS "payment.rental_id",
     payment.amount AS "payment.amount",
     payment.payment_date AS "payment.payment_date"
FROM dvds.payment
WHERE payment.payment_date < '2007-02-14 22:16:01'::timestamp without time zone
ORDER BY payment.payment_date ASC;
`,
	}, {
		Key:   1,
		Value: 9,
	}, {
		Key: 2,
		Value: model.Payment{
			Amount:      2.99,
			CustomerID:  int16(416),
			PaymentDate: gotestparrot.Decode("2007-02-14T21:21:59.996577Z", time.Time{}).(time.Time),
			PaymentID:   int32(17793),
			RentalID:    int32(1158),
			StaffID:     int16(2),
		},
	}})
	gotestparrot.R.Load("TestSelectWithCase", []gotestparrot.Recording{{
		Key: 0,
		Value: `
SELECT (CASE payment.staff_id WHEN 1 THEN 'ONE' WHEN 2 THEN 'TWO' WHEN 3 THEN 'THREE' ELSE 'OTHER' END) AS "staff_id_num"
FROM dvds.payment
ORDER BY payment.payment_id ASC
LIMIT 20;
`,
	}, {
		Key:   1,
		Value: 20,
	}, {
		Key: 2,
		Value: []struct {
			StaffIDNum string
		}{{StaffIDNum: "TWO"}, {StaffIDNum: "ONE"}},
	}})
	gotestparrot.R.Load("TestSelect_ScanToSlice", []gotestparrot.Recording{{
		Key: 0,
		Value: `
SELECT customer.customer_id AS "customer.customer_id",
     customer.store_id AS "customer.store_id",
     customer.first_name AS "customer.first_name",
     customer.last_name AS "customer.last_name",
     customer.email AS "customer.email",
     customer.address_id AS "customer.address_id",
     customer.activebool AS "customer.activebool",
     customer.create_date AS "customer.create_date",
     customer.last_update AS "customer.last_update",
     customer.active AS "customer.active"
FROM dvds.customer
ORDER BY customer.customer_id ASC;
`,
	}, {
		Key: 1,
		Value: model.Customer{
			Active:     gotestparrot.Ptr(int32(1)).(*int32),
			Activebool: true,
			AddressID:  int16(5),
			CreateDate: gotestparrot.Decode("2006-02-14T00:00:00Z", time.Time{}).(time.Time),
			CustomerID: int32(1),
			Email:      gotestparrot.Ptr("mary.smith@sakilacustomer.org").(*string),
			FirstName:  "Mary",
			LastName:   "Smith",
			LastUpdate: gotestparrot.Decode("2013-05-26T14:49:45.738Z", &time.Time{}).(*time.Time),
			StoreID:    int16(1),
		},
	}, {
		Key: 2,
		Value: model.Customer{
			Active:     gotestparrot.Ptr(int32(1)).(*int32),
			Activebool: true,
			AddressID:  int16(6),
			CreateDate: gotestparrot.Decode("2006-02-14T00:00:00Z", time.Time{}).(time.Time),
			CustomerID: int32(2),
			Email:      gotestparrot.Ptr("patricia.johnson@sakilacustomer.org").(*string),
			FirstName:  "Patricia",
			LastName:   "Johnson",
			LastUpdate: gotestparrot.Decode("2013-05-26T14:49:45.738Z", &time.Time{}).(*time.Time),
			StoreID:    int16(1),
		},
	}, {
		Key: 3,
		Value: model.Customer{
			Active:     gotestparrot.Ptr(int32(1)).(*int32),
			Activebool: true,
			AddressID:  int16(605),
			CreateDate: gotestparrot.Decode("2006-02-14T00:00:00Z", time.Time{}).(time.Time),
			CustomerID: int32(599),
			Email:      gotestparrot.Ptr("austin.cintron@sakilacustomer.org").(*string),
			FirstName:  "Austin",
			LastName:   "Cintron",
			LastUpdate: gotestparrot.Decode("2013-05-26T14:49:45.738Z", &time.Time{}).(*time.Time),
			StoreID:    int16(2),
		},
	}})
	gotestparrot.R.Load("TestSelect_ScanToStruct", []gotestparrot.Recording{{
		Key: 0,
		Value: `
SELECT DISTINCT actor.actor_id AS "actor.actor_id",
     actor.first_name AS "actor.first_name",
     actor.last_name AS "actor.last_name",
     actor.last_update AS "actor.last_update"
FROM dvds.actor
WHERE actor.actor_id = 2;
`,
	}, {
		Key: 1,
		Value: model.Actor{
			ActorID:    int32(2),
			FirstName:  "Nick",
			LastName:   "Wahlberg",
			LastUpdate: gotestparrot.Decode("2013-05-26T14:47:57.62Z", time.Time{}).(time.Time),
		},
	}})
	gotestparrot.R.Load("TestSelect_WithoutUniqueColumnSelected", []gotestparrot.Recording{{
		Key: 0,
		Value: `
SELECT customer.first_name AS "customer.first_name",
     customer.last_name AS "customer.last_name",
     customer.email AS "customer.email"
FROM dvds.customer;
`,
	}})
	gotestparrot.R.Load("TestSimpleView", []gotestparrot.Recording{{
		Key: 0,
		Value: `
SELECT actor_info.actor_id AS "actor_info.actor_id",
     actor_info.first_name AS "actor_info.first_name",
     actor_info.last_name AS "actor_info.last_name",
     actor_info.film_info AS "actor_info.film_info"
FROM dvds.actor_info
ORDER BY actor_info.actor_id
LIMIT 10;
`,
	}, {
		Key: 1,
		Value: []ActorInfo{{
			ActorID:   1,
			FilmInfo:  "Animation: Anaconda Confessions, Children: Language Cowboy, Classics: Color Philadelphia, Westward Seabiscuit, Comedy: Vertigo Northwest, Documentary: Academy Dinosaur, Family: King Evolution, Splash Gump, Foreign: Mulholland Beast, Games: Bulworth Commandments, Human Graffiti, Horror: Elephant Trojan, Lady Stage, Rules Human, Music: Wizard Coldblooded, New: Angels Life, Oklahoma Jumanji, Sci-Fi: Cheaper Clyde, Sports: Gleaming Jawbreaker",
			FirstName: "Penelope",
			LastName:  "Guiness",
		}, {
			ActorID:   2,
			FilmInfo:  "Action: Bull Shawshank, Animation: Fight Jawbreaker, Children: Jersey Sassy, Classics: Dracula Crystal, Gilbert Pelican, Comedy: Mallrats United, Rushmore Mermaid, Documentary: Adaptation Holes, Drama: Wardrobe Phantom, Family: Apache Divine, Chisum Behavior, Indian Love, Maguire Apache, Foreign: Baby Hall, Happiness United, Games: Roof Champion, Music: Lucky Flying, New: Destiny Saturday, Flash Wars, Jekyll Frogmen, Mask Peach, Sci-Fi: Chainsaw Uptown, Goodfellas Salute, Travel: Liaisons Sweet, Smile Earring",
			FirstName: "Nick",
			LastName:  "Wahlberg",
		}},
	}})
	gotestparrot.R.Load("TestSubQuery", []gotestparrot.Recording{{
		Key: 0,
		Value: `
SELECT actor.actor_id AS "actor.actor_id",
     actor.first_name AS "actor.first_name",
     actor.last_name AS "actor.last_name",
     actor.last_update AS "actor.last_update",
     film_actor.actor_id AS "film_actor.actor_id",
     film_actor.film_id AS "film_actor.film_id",
     film_actor.last_update AS "film_actor.last_update",
     "rFilms"."film.film_id" AS "film.film_id",
     "rFilms"."film.title" AS "film.title",
     "rFilms"."film.rating" AS "film.rating"
FROM dvds.actor
     INNER JOIN dvds.film_actor ON (actor.actor_id = film_actor.film_id)
     INNER JOIN (
          SELECT film.film_id AS "film.film_id",
               film.title AS "film.title",
               film.rating AS "film.rating"
          FROM dvds.film
          WHERE film.rating = 'R'
     ) AS "rFilms" ON (film_actor.film_id = "rFilms"."film.film_id");
`,
	}})
	gotestparrot.R.Load("TestUnion", []gotestparrot.Recording{{
		Key: 0,
		Value: `
(
     SELECT payment.payment_id AS "payment.payment_id",
          payment.amount AS "payment.amount"
     FROM dvds.payment
     WHERE payment.amount <= 100
)
UNION ALL
(
     SELECT payment.payment_id AS "payment.payment_id",
          payment.amount AS "payment.amount"
     FROM dvds.payment
     WHERE payment.amount >= 200
)
ORDER BY "payment.payment_id" ASC, "payment.amount" DESC
LIMIT 10
OFFSET 20;
`,
	}, {
		Key:   1,
		Value: 10,
	}, {
		Key: 2,
		Value: []model.Payment{{
			Amount:    4.99,
			PaymentID: int32(17523),
		}, {
			Amount:    0.99,
			PaymentID: int32(17524),
		}},
	}})
	gotestparrot.R.Load("TestWindowClause", []gotestparrot.Recording{{
		Key: 0,
		Value: `
SELECT AVG(payment.amount) OVER (),
     AVG(payment.amount) OVER (w1),
     AVG(payment.amount) OVER (w2 ORDER BY payment.customer_id RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING),
     AVG(payment.amount) OVER (w3 RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)
FROM dvds.payment
WHERE payment.payment_id < 10
WINDOW w1 AS (PARTITION BY payment.payment_date), w2 AS (w1), w3 AS (w2 ORDER BY payment.customer_id)
ORDER BY payment.customer_id;
`,
	}})
	gotestparrot.R.Load("TestWindowFunction", []gotestparrot.Recording{{
		Key: 0,
		Value: `
SELECT AVG(payment.amount) OVER (),
     AVG(payment.amount) OVER (PARTITION BY payment.customer_id),
     MAX(payment.amount) OVER (ORDER BY payment.payment_date DESC),
     MIN(payment.amount) OVER (PARTITION BY payment.customer_id ORDER BY payment.payment_date DESC),
     SUM(payment.amount) OVER (PARTITION BY payment.customer_id ORDER BY payment.payment_date DESC ROWS BETWEEN 1 PRECEDING AND 6 FOLLOWING),
     SUM(payment.amount) OVER (PARTITION BY payment.customer_id ORDER BY payment.payment_date DESC RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING),
     MAX(payment.customer_id) OVER (ORDER BY payment.payment_date DESC ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING),
     MIN(payment.customer_id) OVER (PARTITION BY payment.customer_id ORDER BY payment.payment_date DESC),
     SUM(payment.customer_id) OVER (PARTITION BY payment.customer_id ORDER BY payment.payment_date DESC),
     ROW_NUMBER() OVER (ORDER BY payment.payment_date),
     RANK() OVER (ORDER BY payment.payment_date),
     DENSE_RANK() OVER (ORDER BY payment.payment_date),
     CUME_DIST() OVER (ORDER BY payment.payment_date),
     NTILE(11) OVER (ORDER BY payment.payment_date),
     LAG(payment.amount) OVER (ORDER BY payment.payment_date),
     LAG(payment.amount) OVER (ORDER BY payment.payment_date),
     LAG(payment.amount, 2, payment.amount) OVER (ORDER BY payment.payment_date),
     LAG(payment.amount, 2, 100) OVER (ORDER BY payment.payment_date),
     LEAD(payment.amount) OVER (ORDER BY payment.payment_date),
     LEAD(payment.amount) OVER (ORDER BY payment.payment_date),
     LEAD(payment.amount, 2, payment.amount) OVER (ORDER BY payment.payment_date),
     LEAD(payment.amount, 2, 100) OVER (ORDER BY payment.payment_date),
     FIRST_VALUE(payment.amount) OVER (ORDER BY payment.payment_date),
     LAST_VALUE(payment.amount) OVER (ORDER BY payment.payment_date),
     NTH_VALUE(payment.amount, 3) OVER (ORDER BY payment.payment_date)
FROM dvds.payment
WHERE payment.payment_id < 10
GROUP BY payment.amount, payment.customer_id, payment.payment_date;
`,
	}})
}
