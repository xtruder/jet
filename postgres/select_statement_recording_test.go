// Code generated by testparrot. DO NOT EDIT.

package postgres

import gotestparrot "github.com/xtruder/go-testparrot"

func init() {
	gotestparrot.R.Load("TestSelectColumnList", []gotestparrot.Recording{{
		Key: 0,
		Value: `
SELECT table2.col_int AS "table2.col_int",
     table2.col_float AS "table2.col_float",
     table3.col_int AS "table3.col_int"
FROM db.table2;
`,
	}, {
		Key:   1,
		Value: []interface{}{},
	}})
	gotestparrot.R.Load("TestSelectDistinct", []gotestparrot.Recording{{
		Key: 0,
		Value: `
SELECT DISTINCT table1.col_bool AS "table1.col_bool"
FROM db.table1;
`,
	}, {
		Key:   1,
		Value: []interface{}{},
	}})
	gotestparrot.R.Load("TestSelectFrom", []gotestparrot.Recording{{
		Key: 0,
		Value: `
SELECT table1.col_int AS "table1.col_int",
     table2.col_float AS "table2.col_float"
FROM db.table1;
`,
	}, {
		Key:   1,
		Value: []interface{}{},
	}, {
		Key: 2,
		Value: `
SELECT table1.col_int AS "table1.col_int",
     table2.col_float AS "table2.col_float"
FROM db.table1
     INNER JOIN db.table2 ON (table1.col_int = table2.col_int);
`,
	}, {
		Key:   3,
		Value: []interface{}{},
	}, {
		Key: 4,
		Value: `
SELECT table1.col_int AS "table1.col_int",
     table2.col_float AS "table2.col_float"
FROM db.table1
     INNER JOIN db.table2 ON (table1.col_int = table2.col_int);
`,
	}, {
		Key:   5,
		Value: []interface{}{},
	}})
	gotestparrot.R.Load("TestSelectGroupBy", []gotestparrot.Recording{{
		Key: 0,
		Value: `
SELECT table2.col_int AS "table2.col_int"
FROM db.table2
GROUP BY table2.col_float;
`,
	}, {
		Key:   1,
		Value: []interface{}{},
	}})
	gotestparrot.R.Load("TestSelectHaving", []gotestparrot.Recording{{
		Key: 0,
		Value: `
SELECT table3.col_int AS "table3.col_int"
FROM db.table3
HAVING table1.col_bool = $1;
`,
	}, {
		Key:   1,
		Value: []interface{}{true},
	}})
	gotestparrot.R.Load("TestSelectLimitOffset", []gotestparrot.Recording{{
		Key: 0,
		Value: `
SELECT table2.col_int AS "table2.col_int"
FROM db.table2
LIMIT $1;
`,
	}, {
		Key:   1,
		Value: []interface{}{int64(10)},
	}, {
		Key: 2,
		Value: `
SELECT table2.col_int AS "table2.col_int"
FROM db.table2
LIMIT $1
OFFSET $2;
`,
	}, {
		Key:   3,
		Value: []interface{}{int64(10), int64(2)},
	}})
	gotestparrot.R.Load("TestSelectLiterals", []gotestparrot.Recording{{
		Key: 0,
		Value: `
SELECT $1,
     $2,
     $3
FROM db.table1;
`,
	}, {
		Key:   1,
		Value: []interface{}{int64(1), 2.2, false},
	}})
	gotestparrot.R.Load("TestSelectLock", []gotestparrot.Recording{{
		Key: 0,
		Value: `
SELECT table1.col_bool AS "table1.col_bool"
FROM db.table1
FOR UPDATE;
`,
	}, {
		Key:   1,
		Value: []interface{}{},
	}, {
		Key: 2,
		Value: `
SELECT table1.col_bool AS "table1.col_bool"
FROM db.table1
FOR SHARE NOWAIT;
`,
	}, {
		Key:   3,
		Value: []interface{}{},
	}, {
		Key: 4,
		Value: `
SELECT table1.col_bool AS "table1.col_bool"
FROM db.table1
FOR KEY SHARE NOWAIT;
`,
	}, {
		Key:   5,
		Value: []interface{}{},
	}, {
		Key: 6,
		Value: `
SELECT table1.col_bool AS "table1.col_bool"
FROM db.table1
FOR NO KEY UPDATE SKIP LOCKED;
`,
	}, {
		Key:   7,
		Value: []interface{}{},
	}})
	gotestparrot.R.Load("TestSelectOrderBy", []gotestparrot.Recording{{
		Key: 0,
		Value: `
SELECT table2.col_float AS "table2.col_float"
FROM db.table2
ORDER BY table2.col_int DESC;
`,
	}, {
		Key:   1,
		Value: []interface{}{},
	}, {
		Key: 2,
		Value: `
SELECT table2.col_float AS "table2.col_float"
FROM db.table2
ORDER BY table2.col_int DESC, table2.col_int ASC;
`,
	}, {
		Key:   3,
		Value: []interface{}{},
	}})
	gotestparrot.R.Load("TestSelectWhere", []gotestparrot.Recording{{
		Key: 0,
		Value: `
SELECT table1.col_int AS "table1.col_int"
FROM db.table1
WHERE $1;
`,
	}, {
		Key:   1,
		Value: []interface{}{true},
	}, {
		Key: 2,
		Value: `
SELECT table1.col_int AS "table1.col_int"
FROM db.table1
WHERE table1.col_int >= $1;
`,
	}, {
		Key:   3,
		Value: []interface{}{int64(10)},
	}})
}
